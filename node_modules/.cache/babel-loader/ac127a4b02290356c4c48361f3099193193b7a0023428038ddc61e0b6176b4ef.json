{"ast":null,"code":"import { MenuItemBase, newMenu } from './base.js';\nimport { invoke } from '../core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A check menu item inside a {@linkcode Menu} or {@linkcode Submenu}\n * and usually contains a text and a check mark or a similar toggle\n * that corresponds to a checked and unchecked states.\n */\nclass CheckMenuItem extends MenuItemBase {\n  /** @ignore */\n  constructor(rid, id) {\n    super(rid, id, 'Check');\n  }\n  /** Create a new check menu item. */\n  static async new(opts) {\n    return newMenu('Check', opts).then(([rid, id]) => new CheckMenuItem(rid, id));\n  }\n  /** Returns the text of this check menu item. */\n  async text() {\n    return invoke('plugin:menu|text', {\n      rid: this.rid,\n      kind: this.kind\n    });\n  }\n  /** Sets the text for this check menu item. */\n  async setText(text) {\n    return invoke('plugin:menu|set_text', {\n      rid: this.rid,\n      kind: this.kind,\n      text\n    });\n  }\n  /** Returns whether this check menu item is enabled or not. */\n  async isEnabled() {\n    return invoke('plugin:menu|is_enabled', {\n      rid: this.rid,\n      kind: this.kind\n    });\n  }\n  /** Sets whether this check menu item is enabled or not. */\n  async setEnabled(enabled) {\n    return invoke('plugin:menu|set_enabled', {\n      rid: this.rid,\n      kind: this.kind,\n      enabled\n    });\n  }\n  /** Sets the accelerator for this check menu item. */\n  async setAccelerator(accelerator) {\n    return invoke('plugin:menu|set_accelerator', {\n      rid: this.rid,\n      kind: this.kind,\n      accelerator\n    });\n  }\n  /** Returns whether this check menu item is checked or not. */\n  async isChecked() {\n    return invoke('plugin:menu|is_checked', {\n      rid: this.rid\n    });\n  }\n  /** Sets whether this check menu item is checked or not. */\n  async setChecked(checked) {\n    return invoke('plugin:menu|set_checked', {\n      rid: this.rid,\n      checked\n    });\n  }\n}\nexport { CheckMenuItem };","map":{"version":3,"names":["MenuItemBase","newMenu","invoke","CheckMenuItem","constructor","rid","id","new","opts","then","text","kind","setText","isEnabled","setEnabled","enabled","setAccelerator","accelerator","isChecked","setChecked","checked"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/menu/checkMenuItem.js"],"sourcesContent":["import { MenuItemBase, newMenu } from './base.js';\nimport { invoke } from '../core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A check menu item inside a {@linkcode Menu} or {@linkcode Submenu}\n * and usually contains a text and a check mark or a similar toggle\n * that corresponds to a checked and unchecked states.\n */\nclass CheckMenuItem extends MenuItemBase {\n    /** @ignore */\n    constructor(rid, id) {\n        super(rid, id, 'Check');\n    }\n    /** Create a new check menu item. */\n    static async new(opts) {\n        return newMenu('Check', opts).then(([rid, id]) => new CheckMenuItem(rid, id));\n    }\n    /** Returns the text of this check menu item. */\n    async text() {\n        return invoke('plugin:menu|text', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets the text for this check menu item. */\n    async setText(text) {\n        return invoke('plugin:menu|set_text', {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this check menu item is enabled or not. */\n    async isEnabled() {\n        return invoke('plugin:menu|is_enabled', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets whether this check menu item is enabled or not. */\n    async setEnabled(enabled) {\n        return invoke('plugin:menu|set_enabled', {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /** Sets the accelerator for this check menu item. */\n    async setAccelerator(accelerator) {\n        return invoke('plugin:menu|set_accelerator', {\n            rid: this.rid,\n            kind: this.kind,\n            accelerator\n        });\n    }\n    /** Returns whether this check menu item is checked or not. */\n    async isChecked() {\n        return invoke('plugin:menu|is_checked', { rid: this.rid });\n    }\n    /** Sets whether this check menu item is checked or not. */\n    async setChecked(checked) {\n        return invoke('plugin:menu|set_checked', {\n            rid: this.rid,\n            checked\n        });\n    }\n}\n\nexport { CheckMenuItem };\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,OAAO,QAAQ,WAAW;AACjD,SAASC,MAAM,QAAQ,YAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASH,YAAY,CAAC;EACrC;EACAI,WAAWA,CAACC,GAAG,EAAEC,EAAE,EAAE;IACjB,KAAK,CAACD,GAAG,EAAEC,EAAE,EAAE,OAAO,CAAC;EAC3B;EACA;EACA,aAAaC,GAAGA,CAACC,IAAI,EAAE;IACnB,OAAOP,OAAO,CAAC,OAAO,EAAEO,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC,CAACJ,GAAG,EAAEC,EAAE,CAAC,KAAK,IAAIH,aAAa,CAACE,GAAG,EAAEC,EAAE,CAAC,CAAC;EACjF;EACA;EACA,MAAMI,IAAIA,CAAA,EAAG;IACT,OAAOR,MAAM,CAAC,kBAAkB,EAAE;MAAEG,GAAG,EAAE,IAAI,CAACA,GAAG;MAAEM,IAAI,EAAE,IAAI,CAACA;IAAK,CAAC,CAAC;EACzE;EACA;EACA,MAAMC,OAAOA,CAACF,IAAI,EAAE;IAChB,OAAOR,MAAM,CAAC,sBAAsB,EAAE;MAClCG,GAAG,EAAE,IAAI,CAACA,GAAG;MACbM,IAAI,EAAE,IAAI,CAACA,IAAI;MACfD;IACJ,CAAC,CAAC;EACN;EACA;EACA,MAAMG,SAASA,CAAA,EAAG;IACd,OAAOX,MAAM,CAAC,wBAAwB,EAAE;MAAEG,GAAG,EAAE,IAAI,CAACA,GAAG;MAAEM,IAAI,EAAE,IAAI,CAACA;IAAK,CAAC,CAAC;EAC/E;EACA;EACA,MAAMG,UAAUA,CAACC,OAAO,EAAE;IACtB,OAAOb,MAAM,CAAC,yBAAyB,EAAE;MACrCG,GAAG,EAAE,IAAI,CAACA,GAAG;MACbM,IAAI,EAAE,IAAI,CAACA,IAAI;MACfI;IACJ,CAAC,CAAC;EACN;EACA;EACA,MAAMC,cAAcA,CAACC,WAAW,EAAE;IAC9B,OAAOf,MAAM,CAAC,6BAA6B,EAAE;MACzCG,GAAG,EAAE,IAAI,CAACA,GAAG;MACbM,IAAI,EAAE,IAAI,CAACA,IAAI;MACfM;IACJ,CAAC,CAAC;EACN;EACA;EACA,MAAMC,SAASA,CAAA,EAAG;IACd,OAAOhB,MAAM,CAAC,wBAAwB,EAAE;MAAEG,GAAG,EAAE,IAAI,CAACA;IAAI,CAAC,CAAC;EAC9D;EACA;EACA,MAAMc,UAAUA,CAACC,OAAO,EAAE;IACtB,OAAOlB,MAAM,CAAC,yBAAyB,EAAE;MACrCG,GAAG,EAAE,IAAI,CAACA,GAAG;MACbe;IACJ,CAAC,CAAC;EACN;AACJ;AAEA,SAASjB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}