{"ast":null,"code":"import { invoke, transformCallback } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n  TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n  TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n  TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n  TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n  TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n  TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n  TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n  TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n  TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n  TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n  TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\n  TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\n  TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\n  TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n  window.__TAURI_EVENT_PLUGIN_INTERNALS__.unregisterListener(event, eventId);\n  await invoke('plugin:event|unlisten', {\n    event,\n    eventId\n  });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler, options) {\n  var _a;\n  const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string' ? {\n    kind: 'AnyLabel',\n    label: options.target\n  } : (_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : {\n    kind: 'Any'\n  };\n  return invoke('plugin:event|listen', {\n    event,\n    target,\n    handler: transformCallback(handler)\n  }).then(eventId => {\n    return async () => _unlisten(event, eventId);\n  });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler, options) {\n  return listen(event, eventData => {\n    void _unlisten(event, eventData.id);\n    handler(eventData);\n  }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n  await invoke('plugin:event|emit', {\n    event,\n    payload\n  });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 2.0.0\n */\nasync function emitTo(target, event, payload) {\n  const eventTarget = typeof target === 'string' ? {\n    kind: 'AnyLabel',\n    label: target\n  } : target;\n  await invoke('plugin:event|emit_to', {\n    target: eventTarget,\n    event,\n    payload\n  });\n}\nexport { TauriEvent, emit, emitTo, listen, once };","map":{"version":3,"names":["invoke","transformCallback","TauriEvent","_unlisten","event","eventId","window","__TAURI_EVENT_PLUGIN_INTERNALS__","unregisterListener","listen","handler","options","_a","target","kind","label","then","once","eventData","id","emit","payload","emitTo","eventTarget"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/event.js"],"sourcesContent":["import { invoke, transformCallback } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    window.__TAURI_EVENT_PLUGIN_INTERNALS__.unregisterListener(event, eventId);\n    await invoke('plugin:event|unlisten', {\n        event,\n        eventId\n    });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler, options) {\n    var _a;\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\n        ? { kind: 'AnyLabel', label: options.target }\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\n    return invoke('plugin:event|listen', {\n        event,\n        target,\n        handler: transformCallback(handler)\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler, options) {\n    return listen(event, (eventData) => {\n        void _unlisten(event, eventData.id);\n        handler(eventData);\n    }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    await invoke('plugin:event|emit', {\n        event,\n        payload\n    });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 2.0.0\n */\nasync function emitTo(target, event, payload) {\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\n    await invoke('plugin:event|emit_to', {\n        target: eventTarget,\n        event,\n        payload\n    });\n}\n\nexport { TauriEvent, emit, emitTo, listen, once };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}