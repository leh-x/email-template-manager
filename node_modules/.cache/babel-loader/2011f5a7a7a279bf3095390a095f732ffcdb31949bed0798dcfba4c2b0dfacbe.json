{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lhaveman\\\\email-generator\\\\src\\\\components\\\\TemplateList\\\\TemplateList.tsx\",\n  _s = $RefreshSig$();\n// src/components/TemplateList/TemplateList.tsx\nimport React, { useEffect, useMemo, useState, useCallback } from 'react';\nimport { core } from '@tauri-apps/api';\nimport { listen } from '@tauri-apps/api/event';\nimport TemplateCard from '../TemplateCard/TemplateCard';\nimport styles from './TemplateList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeFavourites(input) {\n  // Accept string[] or legacy map<string, boolean>\n  const set = new Set();\n  if (Array.isArray(input)) {\n    input.forEach(s => typeof s === 'string' && set.add(s));\n  } else if (input && typeof input === 'object') {\n    for (const [k, v] of Object.entries(input)) {\n      if (v) set.add(k);\n    }\n  }\n  return set;\n}\nconst TemplateList = ({\n  selectedName,\n  onSelectTemplate\n}) => {\n  _s();\n  const [templates, setTemplates] = useState([]);\n  const [favourites, setFavourites] = useState(new Set());\n  const [search, setSearch] = useState('');\n  const [error, setError] = useState(null);\n\n  // Helper to patch a single template item in state\n  const patchTemplate = useCallback((name, content) => {\n    setTemplates(prev => {\n      const idx = prev.findIndex(t => t.name === name);\n      if (idx === -1) return prev; // not in the current list (e.g., filtered out)\n      const next = prev.slice();\n      next[idx] = {\n        ...next[idx],\n        content,\n        last_modified: new Date().toISOString()\n      };\n      return next;\n    });\n  }, []);\n\n  // Always fetch the latest file content on selection before notifying parent\n  const handleSelectByName = useCallback(async name => {\n    try {\n      var _meta$last_modified;\n      const content = await core.invoke('load_template', {\n        name\n      }); // calls your Rust command\n      const meta = templates.find(t => t.name === name);\n      onSelectTemplate({\n        name,\n        content,\n        last_modified: (_meta$last_modified = meta === null || meta === void 0 ? void 0 : meta.last_modified) !== null && _meta$last_modified !== void 0 ? _meta$last_modified : new Date().toISOString()\n      });\n    } catch (err) {\n      console.error('Failed to load template', err);\n      setError(prev => prev !== null && prev !== void 0 ? prev : 'Failed to load template');\n    }\n  }, [templates, onSelectTemplate]);\n  const toggleFavourite = useCallback(async filename => {\n    const next = new Set(favourites);\n    if (next.has(filename)) next.delete(filename);else next.add(filename);\n    setFavourites(next);\n\n    // Save ONLY an array => resolves the TODO\n    try {\n      await core.invoke('save_favourites', {\n        favourites: Array.from(next)\n      });\n    } catch (err) {\n      console.error('Failed to save favourites', err);\n    }\n  }, [favourites]);\n  const filteredSorted = useMemo(() => {\n    const q = search.trim().toLowerCase();\n    const list = q ? templates.filter(t => t.name.toLowerCase().includes(q) || t.content.toLowerCase().includes(q)) : templates.slice();\n    list.sort((a, b) => {\n      const af = favourites.has(a.name) ? 0 : 1;\n      const bf = favourites.has(b.name) ? 0 : 1;\n      if (af !== bf) return af - bf;\n      return a.name.localeCompare(b.name);\n    });\n    return list;\n  }, [templates, favourites, search]);\n\n  // Load templates + favourites on mount\n  useEffect(() => {\n    core.invoke('load_templates').then(setTemplates).catch(err => {\n      console.error(err);\n      setError('Failed to load templates');\n    });\n    core.invoke('load_favourites').then(data => setFavourites(normalizeFavourites(data))).catch(err => {\n      console.error(err);\n      setError(prev => prev !== null && prev !== void 0 ? prev : 'Failed to load favourites');\n    });\n  }, []);\n\n  // Listen for \"template:saved\" events and refresh just that card\n  useEffect(() => {\n    let unlisten = null;\n    (async () => {\n      unlisten = await listen('template:saved', async ev => {\n        var _ev$payload;\n        const name = (_ev$payload = ev.payload) === null || _ev$payload === void 0 ? void 0 : _ev$payload.name;\n        if (!name) return;\n        try {\n          const fresh = await core.invoke('load_template', {\n            name\n          });\n          patchTemplate(name, fresh);\n        } catch (err) {\n          console.error('Failed to refresh template after save', err);\n        }\n      });\n    })();\n    return () => {\n      if (unlisten) unlisten();\n    };\n  }, [patchTemplate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: styles.heading,\n        children: \"Templates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        placeholder: \"Search templates\\u2026\",\n        className: styles.search,\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.list,\n      children: filteredSorted.map(t => /*#__PURE__*/_jsxDEV(TemplateCard, {\n        name: t.name,\n        content: t.content,\n        last_modified: t.last_modified,\n        isFavourite: favourites.has(t.name),\n        selected: selectedName === t.name,\n        onSelect: handleSelectByName,\n        onToggleFavourite: toggleFavourite\n      }, t.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateList, \"E8bYE+ydiLygIIIJhxA+n2sTbCM=\");\n_c = TemplateList;\nexport default TemplateList;\nvar _c;\n$RefreshReg$(_c, \"TemplateList\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","useCallback","core","listen","TemplateCard","styles","jsxDEV","_jsxDEV","normalizeFavourites","input","set","Set","Array","isArray","forEach","s","add","k","v","Object","entries","TemplateList","selectedName","onSelectTemplate","_s","templates","setTemplates","favourites","setFavourites","search","setSearch","error","setError","patchTemplate","name","content","prev","idx","findIndex","t","next","slice","last_modified","Date","toISOString","handleSelectByName","_meta$last_modified","invoke","meta","find","err","console","toggleFavourite","filename","has","delete","from","filteredSorted","q","trim","toLowerCase","list","filter","includes","sort","a","b","af","bf","localeCompare","then","catch","data","unlisten","ev","_ev$payload","payload","fresh","className","container","children","header","heading","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","isFavourite","selected","onSelect","onToggleFavourite","_c","$RefreshReg$"],"sources":["C:/Users/lhaveman/email-generator/src/components/TemplateList/TemplateList.tsx"],"sourcesContent":["// src/components/TemplateList/TemplateList.tsx\r\nimport React, { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport { core } from '@tauri-apps/api';\r\nimport { listen, type UnlistenFn } from '@tauri-apps/api/event';\r\n\r\nimport TemplateCard from '../TemplateCard/TemplateCard';\r\nimport styles from './TemplateList.module.css';\r\n\r\nexport type TemplateFile = {\r\n  name: string;\r\n  content: string;\r\n  last_modified: string;\r\n};\r\n\r\nfunction normalizeFavourites(input: unknown): Set<string> {\r\n  // Accept string[] or legacy map<string, boolean>\r\n  const set = new Set<string>();\r\n  if (Array.isArray(input)) {\r\n    input.forEach((s) => typeof s === 'string' && set.add(s));\r\n  } else if (input && typeof input === 'object') {\r\n    for (const [k, v] of Object.entries(input as Record<string, unknown>)) {\r\n      if (v) set.add(k);\r\n    }\r\n  }\r\n  return set;\r\n}\r\n\r\ninterface TemplateListProps {\r\n  selectedName: string | null;\r\n  onSelectTemplate: (tpl: TemplateFile) => void;\r\n}\r\n\r\nconst TemplateList: React.FC<TemplateListProps> = ({ selectedName, onSelectTemplate }) => {\r\n  const [templates, setTemplates] = useState<TemplateFile[]>([]);\r\n  const [favourites, setFavourites] = useState<Set<string>>(new Set());\r\n  const [search, setSearch] = useState('');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  \r\n  // Helper to patch a single template item in state\r\n  const patchTemplate = useCallback((name: string, content: string) => {\r\n    setTemplates(prev => {\r\n      const idx = prev.findIndex(t => t.name === name);\r\n      if (idx === -1) return prev; // not in the current list (e.g., filtered out)\r\n      const next = prev.slice();\r\n      next[idx] = {\r\n        ...next[idx],\r\n        content,\r\n        last_modified: new Date().toISOString()\r\n      };\r\n      return next;\r\n    });\r\n  }, []);\r\n\r\n  // Always fetch the latest file content on selection before notifying parent\r\n  const handleSelectByName = useCallback(async (name: string) => {\r\n    try {\r\n      const content = await core.invoke<string>('load_template', { name }); // calls your Rust command\r\n      const meta = templates.find(t => t.name === name);\r\n      onSelectTemplate({\r\n        name,\r\n        content,\r\n        last_modified: meta?.last_modified ?? new Date().toISOString(),\r\n      });\r\n    } catch (err) {\r\n      console.error('Failed to load template', err);\r\n      setError(prev => prev ?? 'Failed to load template');\r\n    }\r\n  }, [templates, onSelectTemplate]);\r\n\r\n  const toggleFavourite = useCallback(async (filename: string) => {\r\n    const next = new Set(favourites);\r\n    if (next.has(filename)) next.delete(filename);\r\n    else next.add(filename);\r\n    setFavourites(next);\r\n\r\n    // Save ONLY an array => resolves the TODO\r\n    try {\r\n      await core.invoke('save_favourites', { favourites: Array.from(next) });\r\n    } catch (err) {\r\n      console.error('Failed to save favourites', err);\r\n    }\r\n  }, [favourites]);\r\n\r\n  const filteredSorted = useMemo(() => {\r\n    const q = search.trim().toLowerCase();\r\n    const list = q\r\n      ? templates.filter(t =>\r\n          t.name.toLowerCase().includes(q) ||\r\n          t.content.toLowerCase().includes(q)\r\n        )\r\n      : templates.slice();\r\n\r\n    list.sort((a, b) => {\r\n      const af = favourites.has(a.name) ? 0 : 1;\r\n      const bf = favourites.has(b.name) ? 0 : 1;\r\n      if (af !== bf) return af - bf;\r\n      return a.name.localeCompare(b.name);\r\n    });\r\n    return list;\r\n  }, [templates, favourites, search]);\r\n\r\n    // Load templates + favourites on mount\r\n  useEffect(() => {\r\n    core.invoke<TemplateFile[]>('load_templates')\r\n      .then(setTemplates)\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError('Failed to load templates');\r\n      });\r\n\r\n    core.invoke<unknown>('load_favourites')\r\n      .then((data) => setFavourites(normalizeFavourites(data)))\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError((prev) => prev ?? 'Failed to load favourites');\r\n      });\r\n  }, []);\r\n\r\n  \r\n  // Listen for \"template:saved\" events and refresh just that card\r\n  useEffect(() => {\r\n    let unlisten: UnlistenFn | null = null;\r\n    (async () => {\r\n      unlisten = await listen<{ name: string }>('template:saved', async (ev) => {\r\n        const name = ev.payload?.name;\r\n        if (!name) return;\r\n        try {\r\n          const fresh = await core.invoke<string>('load_template', { name });\r\n          patchTemplate(name, fresh);\r\n        } catch (err) {\r\n          console.error('Failed to refresh template after save', err);\r\n        }\r\n      });\r\n    })();\r\n    return () => { if (unlisten) unlisten(); };\r\n  }, [patchTemplate]);\r\n\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        <h4 className={styles.heading}>Templates</h4>\r\n        <input\r\n          type=\"search\"\r\n          placeholder=\"Search templates…\"\r\n          className={styles.search}\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      {error && <div className={styles.error}>{error}</div>}\r\n\r\n      <div className={styles.list}>\r\n        {filteredSorted.map((t) => (\r\n          <TemplateCard\r\n            key={t.name}\r\n            name={t.name}\r\n            content={t.content}\r\n            last_modified={t.last_modified}\r\n            isFavourite={favourites.has(t.name)}\r\n            selected={selectedName === t.name}\r\n            onSelect={handleSelectByName}\r\n            onToggleFavourite={toggleFavourite}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemplateList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}