{"ast":null,"code":"import { Resource, invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */\nclass Image extends Resource {\n  /**\n   * Creates an Image from a resource ID. For internal use only.\n   *\n   * @ignore\n   */\n  constructor(rid) {\n    super(rid);\n  }\n  /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\n  static async new(rgba, width, height) {\n    return invoke('plugin:image|new', {\n      rgba: transformImage(rgba),\n      width,\n      height\n    }).then(rid => new Image(rid));\n  }\n  /**\n   * Creates a new image using the provided bytes by inferring the file format.\n   * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n   *\n   * Only `ico` and `png` are supported (based on activated feature flag).\n   *\n   * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n   * To enable it, change your Cargo.toml file:\n   * ```toml\n   * [dependencies]\n   * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n   * ```\n   */\n  static async fromBytes(bytes) {\n    return invoke('plugin:image|from_bytes', {\n      bytes: transformImage(bytes)\n    }).then(rid => new Image(rid));\n  }\n  /**\n   * Creates a new image using the provided path.\n   *\n   * Only `ico` and `png` are supported (based on activated feature flag).\n   *\n   * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n   * To enable it, change your Cargo.toml file:\n   * ```toml\n   * [dependencies]\n   * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n   * ```\n   */\n  static async fromPath(path) {\n    return invoke('plugin:image|from_path', {\n      path\n    }).then(rid => new Image(rid));\n  }\n  /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\n  async rgba() {\n    return invoke('plugin:image|rgba', {\n      rid: this.rid\n    }).then(buffer => new Uint8Array(buffer));\n  }\n  /** Returns the size of this image.  */\n  async size() {\n    return invoke('plugin:image|size', {\n      rid: this.rid\n    });\n  }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */\nfunction transformImage(image) {\n  const ret = image == null ? null : typeof image === 'string' ? image : image instanceof Image ? image.rid : image;\n  return ret;\n}\nexport { Image, transformImage };","map":{"version":3,"names":["Resource","invoke","Image","constructor","rid","new","rgba","width","height","transformImage","then","fromBytes","bytes","fromPath","path","buffer","Uint8Array","size","image","ret"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/image.js"],"sourcesContent":["import { Resource, invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */\nclass Image extends Resource {\n    /**\n     * Creates an Image from a resource ID. For internal use only.\n     *\n     * @ignore\n     */\n    constructor(rid) {\n        super(rid);\n    }\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\n    static async new(rgba, width, height) {\n        return invoke('plugin:image|new', {\n            rgba: transformImage(rgba),\n            width,\n            height\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided bytes by inferring the file format.\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromBytes(bytes) {\n        return invoke('plugin:image|from_bytes', {\n            bytes: transformImage(bytes)\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided path.\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromPath(path) {\n        return invoke('plugin:image|from_path', { path }).then((rid) => new Image(rid));\n    }\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\n    async rgba() {\n        return invoke('plugin:image|rgba', {\n            rid: this.rid\n        }).then((buffer) => new Uint8Array(buffer));\n    }\n    /** Returns the size of this image.  */\n    async size() {\n        return invoke('plugin:image|size', { rid: this.rid });\n    }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */\nfunction transformImage(image) {\n    const ret = image == null\n        ? null\n        : typeof image === 'string'\n            ? image\n            : image instanceof Image\n                ? image.rid\n                : image;\n    return ret;\n}\n\nexport { Image, transformImage };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,WAAW;;AAE5C;AACA;AACA;AACA;AACA,MAAMC,KAAK,SAASF,QAAQ,CAAC;EACzB;AACJ;AACA;AACA;AACA;EACIG,WAAWA,CAACC,GAAG,EAAE;IACb,KAAK,CAACA,GAAG,CAAC;EACd;EACA;EACA,aAAaC,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;IAClC,OAAOP,MAAM,CAAC,kBAAkB,EAAE;MAC9BK,IAAI,EAAEG,cAAc,CAACH,IAAI,CAAC;MAC1BC,KAAK;MACLC;IACJ,CAAC,CAAC,CAACE,IAAI,CAAEN,GAAG,IAAK,IAAIF,KAAK,CAACE,GAAG,CAAC,CAAC;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,aAAaO,SAASA,CAACC,KAAK,EAAE;IAC1B,OAAOX,MAAM,CAAC,yBAAyB,EAAE;MACrCW,KAAK,EAAEH,cAAc,CAACG,KAAK;IAC/B,CAAC,CAAC,CAACF,IAAI,CAAEN,GAAG,IAAK,IAAIF,KAAK,CAACE,GAAG,CAAC,CAAC;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,aAAaS,QAAQA,CAACC,IAAI,EAAE;IACxB,OAAOb,MAAM,CAAC,wBAAwB,EAAE;MAAEa;IAAK,CAAC,CAAC,CAACJ,IAAI,CAAEN,GAAG,IAAK,IAAIF,KAAK,CAACE,GAAG,CAAC,CAAC;EACnF;EACA;EACA,MAAME,IAAIA,CAAA,EAAG;IACT,OAAOL,MAAM,CAAC,mBAAmB,EAAE;MAC/BG,GAAG,EAAE,IAAI,CAACA;IACd,CAAC,CAAC,CAACM,IAAI,CAAEK,MAAM,IAAK,IAAIC,UAAU,CAACD,MAAM,CAAC,CAAC;EAC/C;EACA;EACA,MAAME,IAAIA,CAAA,EAAG;IACT,OAAOhB,MAAM,CAAC,mBAAmB,EAAE;MAAEG,GAAG,EAAE,IAAI,CAACA;IAAI,CAAC,CAAC;EACzD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,cAAcA,CAACS,KAAK,EAAE;EAC3B,MAAMC,GAAG,GAAGD,KAAK,IAAI,IAAI,GACnB,IAAI,GACJ,OAAOA,KAAK,KAAK,QAAQ,GACrBA,KAAK,GACLA,KAAK,YAAYhB,KAAK,GAClBgB,KAAK,CAACd,GAAG,GACTc,KAAK;EACnB,OAAOC,GAAG;AACd;AAEA,SAASjB,KAAK,EAAEO,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}