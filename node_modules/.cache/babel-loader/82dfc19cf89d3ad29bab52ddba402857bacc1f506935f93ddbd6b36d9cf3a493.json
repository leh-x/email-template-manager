{"ast":null,"code":"import { getCurrentWebview, Webview } from './webview.js';\nimport { Window } from './window.js';\nimport { listen, once } from './event.js';\nimport { invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Get an instance of `Webview` for the current webview window.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebviewWindow() {\n  const webview = getCurrentWebview();\n  // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n  return new WebviewWindow(webview.label, {\n    skip: true\n  });\n}\n/**\n * Gets a list of instances of `Webview` for all available webview windows.\n *\n * @since 2.0.0\n */\nasync function getAllWebviewWindows() {\n  return invoke('plugin:window|get_all_windows').then(windows => windows.map(w => new WebviewWindow(w, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  })));\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass WebviewWindow {\n  /**\n   * Creates a new {@link Window} hosting a {@link Webview}.\n   * @example\n   * ```typescript\n   * import { WebviewWindow } from '@tauri-apps/api/webviewWindow'\n   * const webview = new WebviewWindow('my-label', {\n   *   url: 'https://github.com/tauri-apps/tauri'\n   * });\n   * webview.once('tauri://created', function () {\n   *  // webview successfully created\n   * });\n   * webview.once('tauri://error', function (e) {\n   *  // an error happened creating the webview\n   * });\n   * ```\n   *\n   * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n   * @returns The {@link WebviewWindow} instance to communicate with the window and webview.\n   */\n  constructor(label) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    this.label = label;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.listeners = Object.create(null);\n    // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n    if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n      invoke('plugin:webview|create_webview_window', {\n        options: {\n          ...options,\n          parent: typeof options.parent === 'string' ? options.parent : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n          label\n        }\n      }).then(async () => this.emit('tauri://created')).catch(async e => this.emit('tauri://error', e));\n    }\n  }\n  /**\n   * Gets the Webview for the webview associated with the given label.\n   * @example\n   * ```typescript\n   * import { Webview } from '@tauri-apps/api/webviewWindow';\n   * const mainWebview = Webview.getByLabel('main');\n   * ```\n   *\n   * @param label The webview label.\n   * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n   */\n  static async getByLabel(label) {\n    var _a;\n    const webview = (_a = (await getAllWebviewWindows()).find(w => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    if (webview) {\n      // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n      return new WebviewWindow(webview.label, {\n        skip: true\n      });\n    }\n    return null;\n  }\n  /**\n   * Get an instance of `Webview` for the current webview.\n   */\n  static getCurrent() {\n    return getCurrentWebviewWindow();\n  }\n  /**\n   * Gets a list of instances of `Webview` for all available webviews.\n   */\n  static async getAll() {\n    return getAllWebviewWindows();\n  }\n  /**\n   * Listen to an emitted event on this webivew window.\n   *\n   * @example\n   * ```typescript\n   * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n   * const unlisten = await WebviewWindow.getCurrent().listen<string>('state-changed', (event) => {\n   *   console.log(`Got error: ${payload}`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async listen(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return () => {\n        // eslint-disable-next-line security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      };\n    }\n    return listen(event, handler, {\n      target: {\n        kind: 'WebviewWindow',\n        label: this.label\n      }\n    });\n  }\n  /**\n   * Listen to an emitted event on this webview window only once.\n   *\n   * @example\n   * ```typescript\n   * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n   * const unlisten = await WebviewWindow.getCurrent().once<null>('initialized', (event) => {\n   *   console.log(`Webview initialized!`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async once(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return () => {\n        // eslint-disable-next-line security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      };\n    }\n    return once(event, handler, {\n      target: {\n        kind: 'WebviewWindow',\n        label: this.label\n      }\n    });\n  }\n  /**\n   * Set the window and webview background color.\n   *\n   * #### Platform-specific:\n   *\n   * - **Android / iOS:** Unsupported for the window layer.\n   * - **macOS / iOS**: Not implemented for the webview layer.\n   * - **Windows**:\n   *   - alpha channel is ignored for the window layer.\n   *   - On Windows 7, alpha channel is ignored for the webview layer.\n   *   - On Windows 8 and newer, if alpha channel is not `0`, it will be ignored.\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   *\n   * @since 2.1.0\n   */\n  async setBackgroundColor(color) {\n    return invoke('plugin:window|set_background_color', {\n      color\n    }).then(() => {\n      return invoke('plugin:webview|set_webview_background_color', {\n        color\n      });\n    });\n  }\n}\n// Order matters, we use window APIs by default\napplyMixins(WebviewWindow, [Window, Webview]);\n/** Extends a base class by other specified classes, without overriding existing properties */\nfunction applyMixins(baseClass, extendedClasses) {\n  (Array.isArray(extendedClasses) ? extendedClasses : [extendedClasses]).forEach(extendedClass => {\n    Object.getOwnPropertyNames(extendedClass.prototype).forEach(name => {\n      var _a;\n      if (typeof baseClass.prototype === 'object' && baseClass.prototype && name in baseClass.prototype) return;\n      Object.defineProperty(baseClass.prototype, name,\n      // eslint-disable-next-line\n      (_a = Object.getOwnPropertyDescriptor(extendedClass.prototype, name)) !== null && _a !== void 0 ? _a : Object.create(null));\n    });\n  });\n}\nexport { WebviewWindow, getAllWebviewWindows, getCurrentWebviewWindow };","map":{"version":3,"names":["getCurrentWebview","Webview","Window","listen","once","invoke","getCurrentWebviewWindow","webview","WebviewWindow","label","skip","getAllWebviewWindows","then","windows","map","w","constructor","options","arguments","length","undefined","_a","listeners","Object","create","parent","emit","catch","e","getByLabel","find","getCurrent","getAll","event","handler","_handleTauriEvent","splice","indexOf","target","kind","setBackgroundColor","color","applyMixins","baseClass","extendedClasses","Array","isArray","forEach","extendedClass","getOwnPropertyNames","prototype","name","defineProperty","getOwnPropertyDescriptor"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/webviewWindow.js"],"sourcesContent":["import { getCurrentWebview, Webview } from './webview.js';\nimport { Window } from './window.js';\nimport { listen, once } from './event.js';\nimport { invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Get an instance of `Webview` for the current webview window.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebviewWindow() {\n    const webview = getCurrentWebview();\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    return new WebviewWindow(webview.label, { skip: true });\n}\n/**\n * Gets a list of instances of `Webview` for all available webview windows.\n *\n * @since 2.0.0\n */\nasync function getAllWebviewWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new WebviewWindow(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass WebviewWindow {\n    /**\n     * Creates a new {@link Window} hosting a {@link Webview}.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow'\n     * const webview = new WebviewWindow('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview\n     * });\n     * ```\n     *\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link WebviewWindow} instance to communicate with the window and webview.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:webview|create_webview_window', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webviewWindow';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        const webview = (_a = (await getAllWebviewWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n        if (webview) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new WebviewWindow(webview.label, { skip: true });\n        }\n        return null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */\n    static getCurrent() {\n        return getCurrentWebviewWindow();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */\n    static async getAll() {\n        return getAllWebviewWindows();\n    }\n    /**\n     * Listen to an emitted event on this webivew window.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'WebviewWindow', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview window only once.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'WebviewWindow', label: this.label }\n        });\n    }\n    /**\n     * Set the window and webview background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Android / iOS:** Unsupported for the window layer.\n     * - **macOS / iOS**: Not implemented for the webview layer.\n     * - **Windows**:\n     *   - alpha channel is ignored for the window layer.\n     *   - On Windows 7, alpha channel is ignored for the webview layer.\n     *   - On Windows 8 and newer, if alpha channel is not `0`, it will be ignored.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color }).then(() => {\n            return invoke('plugin:webview|set_webview_background_color', { color });\n        });\n    }\n}\n// Order matters, we use window APIs by default\napplyMixins(WebviewWindow, [Window, Webview]);\n/** Extends a base class by other specified classes, without overriding existing properties */\nfunction applyMixins(baseClass, extendedClasses) {\n    (Array.isArray(extendedClasses)\n        ? extendedClasses\n        : [extendedClasses]).forEach((extendedClass) => {\n        Object.getOwnPropertyNames(extendedClass.prototype).forEach((name) => {\n            var _a;\n            if (typeof baseClass.prototype === 'object'\n                && baseClass.prototype\n                && name in baseClass.prototype)\n                return;\n            Object.defineProperty(baseClass.prototype, name, \n            // eslint-disable-next-line\n            (_a = Object.getOwnPropertyDescriptor(extendedClass.prototype, name)) !== null && _a !== void 0 ? _a : Object.create(null));\n        });\n    });\n}\n\nexport { WebviewWindow, getAllWebviewWindows, getCurrentWebviewWindow };\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,OAAO,QAAQ,cAAc;AACzD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,MAAM,EAAEC,IAAI,QAAQ,YAAY;AACzC,SAASC,MAAM,QAAQ,WAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAA,EAAG;EAC/B,MAAMC,OAAO,GAAGP,iBAAiB,CAAC,CAAC;EACnC;EACA,OAAO,IAAIQ,aAAa,CAACD,OAAO,CAACE,KAAK,EAAE;IAAEC,IAAI,EAAE;EAAK,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,oBAAoBA,CAAA,EAAG;EAClC,OAAON,MAAM,CAAC,+BAA+B,CAAC,CAACO,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,GAAG,CAAEC,CAAC,IAAK,IAAIP,aAAa,CAACO,CAAC,EAAE;IACrG;IACAL,IAAI,EAAE;EACV,CAAC,CAAC,CAAC,CAAC;AACR;AACA;AACA,MAAMF,aAAa,CAAC;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIQ,WAAWA,CAACP,KAAK,EAAgB;IAAA,IAAdQ,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC3B,IAAIG,EAAE;IACN,IAAI,CAACZ,KAAK,GAAGA,KAAK;IAClB;IACA,IAAI,CAACa,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACpC;IACA,IAAI,EAAEP,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACP,IAAI,CAAC,EAAE;MACnEL,MAAM,CAAC,sCAAsC,EAAE;QAC3CY,OAAO,EAAE;UACL,GAAGA,OAAO;UACVQ,MAAM,EAAE,OAAOR,OAAO,CAACQ,MAAM,KAAK,QAAQ,GACpCR,OAAO,CAACQ,MAAM,GACd,CAACJ,EAAE,GAAGJ,OAAO,CAACQ,MAAM,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACZ,KAAK;UACzEA;QACJ;MACJ,CAAC,CAAC,CACGG,IAAI,CAAC,YAAY,IAAI,CAACc,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAC9CC,KAAK,CAAC,MAAOC,CAAC,IAAK,IAAI,CAACF,IAAI,CAAC,eAAe,EAAEE,CAAC,CAAC,CAAC;IAC1D;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,aAAaC,UAAUA,CAACpB,KAAK,EAAE;IAC3B,IAAIY,EAAE;IACN,MAAMd,OAAO,GAAG,CAACc,EAAE,GAAG,CAAC,MAAMV,oBAAoB,CAAC,CAAC,EAAEmB,IAAI,CAAEf,CAAC,IAAKA,CAAC,CAACN,KAAK,KAAKA,KAAK,CAAC,MAAM,IAAI,IAAIY,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;IAC1H,IAAId,OAAO,EAAE;MACT;MACA,OAAO,IAAIC,aAAa,CAACD,OAAO,CAACE,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IAC3D;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACI,OAAOqB,UAAUA,CAAA,EAAG;IAChB,OAAOzB,uBAAuB,CAAC,CAAC;EACpC;EACA;AACJ;AACA;EACI,aAAa0B,MAAMA,CAAA,EAAG;IAClB,OAAOrB,oBAAoB,CAAC,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMR,MAAMA,CAAC8B,KAAK,EAAEC,OAAO,EAAE;IACzB,IAAI,IAAI,CAACC,iBAAiB,CAACF,KAAK,EAAEC,OAAO,CAAC,EAAE;MACxC,OAAO,MAAM;QACT;QACA,MAAMZ,SAAS,GAAG,IAAI,CAACA,SAAS,CAACW,KAAK,CAAC;QACvCX,SAAS,CAACc,MAAM,CAACd,SAAS,CAACe,OAAO,CAACH,OAAO,CAAC,EAAE,CAAC,CAAC;MACnD,CAAC;IACL;IACA,OAAO/B,MAAM,CAAC8B,KAAK,EAAEC,OAAO,EAAE;MAC1BI,MAAM,EAAE;QAAEC,IAAI,EAAE,eAAe;QAAE9B,KAAK,EAAE,IAAI,CAACA;MAAM;IACvD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAML,IAAIA,CAAC6B,KAAK,EAAEC,OAAO,EAAE;IACvB,IAAI,IAAI,CAACC,iBAAiB,CAACF,KAAK,EAAEC,OAAO,CAAC,EAAE;MACxC,OAAO,MAAM;QACT;QACA,MAAMZ,SAAS,GAAG,IAAI,CAACA,SAAS,CAACW,KAAK,CAAC;QACvCX,SAAS,CAACc,MAAM,CAACd,SAAS,CAACe,OAAO,CAACH,OAAO,CAAC,EAAE,CAAC,CAAC;MACnD,CAAC;IACL;IACA,OAAO9B,IAAI,CAAC6B,KAAK,EAAEC,OAAO,EAAE;MACxBI,MAAM,EAAE;QAAEC,IAAI,EAAE,eAAe;QAAE9B,KAAK,EAAE,IAAI,CAACA;MAAM;IACvD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM+B,kBAAkBA,CAACC,KAAK,EAAE;IAC5B,OAAOpC,MAAM,CAAC,oCAAoC,EAAE;MAAEoC;IAAM,CAAC,CAAC,CAAC7B,IAAI,CAAC,MAAM;MACtE,OAAOP,MAAM,CAAC,6CAA6C,EAAE;QAAEoC;MAAM,CAAC,CAAC;IAC3E,CAAC,CAAC;EACN;AACJ;AACA;AACAC,WAAW,CAAClC,aAAa,EAAE,CAACN,MAAM,EAAED,OAAO,CAAC,CAAC;AAC7C;AACA,SAASyC,WAAWA,CAACC,SAAS,EAAEC,eAAe,EAAE;EAC7C,CAACC,KAAK,CAACC,OAAO,CAACF,eAAe,CAAC,GACzBA,eAAe,GACf,CAACA,eAAe,CAAC,EAAEG,OAAO,CAAEC,aAAa,IAAK;IAChDzB,MAAM,CAAC0B,mBAAmB,CAACD,aAAa,CAACE,SAAS,CAAC,CAACH,OAAO,CAAEI,IAAI,IAAK;MAClE,IAAI9B,EAAE;MACN,IAAI,OAAOsB,SAAS,CAACO,SAAS,KAAK,QAAQ,IACpCP,SAAS,CAACO,SAAS,IACnBC,IAAI,IAAIR,SAAS,CAACO,SAAS,EAC9B;MACJ3B,MAAM,CAAC6B,cAAc,CAACT,SAAS,CAACO,SAAS,EAAEC,IAAI;MAC/C;MACA,CAAC9B,EAAE,GAAGE,MAAM,CAAC8B,wBAAwB,CAACL,aAAa,CAACE,SAAS,EAAEC,IAAI,CAAC,MAAM,IAAI,IAAI9B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGE,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/H,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEA,SAAShB,aAAa,EAAEG,oBAAoB,EAAEL,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}