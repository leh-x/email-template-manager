{"ast":null,"code":"import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nexport { LogicalPosition, LogicalSize } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { transformImage } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * #### Window events\n *\n * Events can be listened to using {@link Window.listen}:\n * ```typescript\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n * getCurrentWindow().listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n  /**\n   * #### Platform-specific\n   * - **macOS:** Bounces the dock icon until the application is in focus.\n   * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n   */\n  UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n  /**\n   * #### Platform-specific\n   * - **macOS:** Bounces the dock icon once.\n   * - **Windows:** Flashes the taskbar button until the application is in focus.\n   */\n  UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n  constructor(event) {\n    this._preventDefault = false;\n    this.event = event.event;\n    this.id = event.id;\n  }\n  preventDefault() {\n    this._preventDefault = true;\n  }\n  isPreventDefault() {\n    return this._preventDefault;\n  }\n}\nvar ProgressBarStatus;\n(function (ProgressBarStatus) {\n  /**\n   * Hide progress bar.\n   */\n  ProgressBarStatus[\"None\"] = \"none\";\n  /**\n   * Normal state.\n   */\n  ProgressBarStatus[\"Normal\"] = \"normal\";\n  /**\n   * Indeterminate state. **Treated as Normal on Linux and macOS**\n   */\n  ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\n  /**\n   * Paused state. **Treated as Normal on Linux**\n   */\n  ProgressBarStatus[\"Paused\"] = \"paused\";\n  /**\n   * Error state. **Treated as Normal on linux**\n   */\n  ProgressBarStatus[\"Error\"] = \"error\";\n})(ProgressBarStatus || (ProgressBarStatus = {}));\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 1.0.0\n */\nfunction getCurrentWindow() {\n  return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 1.0.0\n */\nasync function getAllWindows() {\n  return invoke('plugin:window|get_all_windows').then(windows => windows.map(w => new Window(w, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created window\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n *\n * const appWindow = new Window('theUniqueLabel');\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Window {\n  /**\n   * Creates a new Window.\n   * @example\n   * ```typescript\n   * import { Window } from '@tauri-apps/api/window';\n   * const appWindow = new Window('my-label');\n   * appWindow.once('tauri://created', function () {\n   *  // window successfully created\n   * });\n   * appWindow.once('tauri://error', function (e) {\n   *  // an error happened creating the window\n   * });\n   * ```\n   *\n   * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\n   * @returns The {@link Window} instance to communicate with the window.\n   */\n  constructor(label) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    this.label = label;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.listeners = Object.create(null);\n    // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n    if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n      invoke('plugin:window|create', {\n        options: {\n          ...options,\n          parent: typeof options.parent === 'string' ? options.parent : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n          label\n        }\n      }).then(async () => this.emit('tauri://created')).catch(async e => this.emit('tauri://error', e));\n    }\n  }\n  /**\n   * Gets the Window associated with the given label.\n   * @example\n   * ```typescript\n   * import { Window } from '@tauri-apps/api/window';\n   * const mainWindow = Window.getByLabel('main');\n   * ```\n   *\n   * @param label The window label.\n   * @returns The Window instance to communicate with the window or null if the window doesn't exist.\n   */\n  static async getByLabel(label) {\n    var _a;\n    return (_a = (await getAllWindows()).find(w => w.label === label)) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * Get an instance of `Window` for the current window.\n   */\n  static getCurrent() {\n    return getCurrentWindow();\n  }\n  /**\n   * Gets a list of instances of `Window` for all available windows.\n   */\n  static async getAll() {\n    return getAllWindows();\n  }\n  /**\n   *  Gets the focused window.\n   * @example\n   * ```typescript\n   * import { Window } from '@tauri-apps/api/window';\n   * const focusedWindow = Window.getFocusedWindow();\n   * ```\n   *\n   * @returns The Window instance or `undefined` if there is not any focused window.\n   */\n  static async getFocusedWindow() {\n    for (const w of await getAllWindows()) {\n      if (await w.isFocused()) {\n        return w;\n      }\n    }\n    return null;\n  }\n  /**\n   * Listen to an emitted event on this window.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const unlisten = await getCurrentWindow().listen<string>('state-changed', (event) => {\n   *   console.log(`Got error: ${payload}`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async listen(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return () => {\n        // eslint-disable-next-line security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      };\n    }\n    return listen(event, handler, {\n      target: {\n        kind: 'Window',\n        label: this.label\n      }\n    });\n  }\n  /**\n   * Listen to an emitted event on this window only once.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const unlisten = await getCurrentWindow().once<null>('initialized', (event) => {\n   *   console.log(`Window initialized!`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async once(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return () => {\n        // eslint-disable-next-line security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      };\n    }\n    return once(event, handler, {\n      target: {\n        kind: 'Window',\n        label: this.label\n      }\n    });\n  }\n  /**\n   * Emits an event to all {@link EventTarget|targets}.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param payload Event payload.\n   */\n  async emit(event, payload) {\n    if (localTauriEvents.includes(event)) {\n      // eslint-disable-next-line\n      for (const handler of this.listeners[event] || []) {\n        handler({\n          event,\n          id: -1,\n          payload\n        });\n      }\n      return;\n    }\n    return emit(event, payload);\n  }\n  /**\n   * Emits an event to all {@link EventTarget|targets} matching the given target.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\n   * ```\n   * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param payload Event payload.\n   */\n  async emitTo(target, event, payload) {\n    if (localTauriEvents.includes(event)) {\n      // eslint-disable-next-line security/detect-object-injection\n      for (const handler of this.listeners[event] || []) {\n        handler({\n          event,\n          id: -1,\n          payload\n        });\n      }\n      return;\n    }\n    return emitTo(target, event, payload);\n  }\n  /** @ignore */\n  _handleTauriEvent(event, handler) {\n    if (localTauriEvents.includes(event)) {\n      if (!(event in this.listeners)) {\n        // eslint-disable-next-line\n        this.listeners[event] = [handler];\n      } else {\n        // eslint-disable-next-line\n        this.listeners[event].push(handler);\n      }\n      return true;\n    }\n    return false;\n  }\n  // Getters\n  /**\n   * The scale factor that can be used to map physical pixels to logical pixels.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const factor = await getCurrentWindow().scaleFactor();\n   * ```\n   *\n   * @returns The window's monitor scale factor.\n   */\n  async scaleFactor() {\n    return invoke('plugin:window|scale_factor', {\n      label: this.label\n    });\n  }\n  /**\n   * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const position = await getCurrentWindow().innerPosition();\n   * ```\n   *\n   * @returns The window's inner position.\n   */\n  async innerPosition() {\n    return invoke('plugin:window|inner_position', {\n      label: this.label\n    }).then(p => new PhysicalPosition(p));\n  }\n  /**\n   * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const position = await getCurrentWindow().outerPosition();\n   * ```\n   *\n   * @returns The window's outer position.\n   */\n  async outerPosition() {\n    return invoke('plugin:window|outer_position', {\n      label: this.label\n    }).then(p => new PhysicalPosition(p));\n  }\n  /**\n   * The physical size of the window's client area.\n   * The client area is the content of the window, excluding the title bar and borders.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const size = await getCurrentWindow().innerSize();\n   * ```\n   *\n   * @returns The window's inner size.\n   */\n  async innerSize() {\n    return invoke('plugin:window|inner_size', {\n      label: this.label\n    }).then(s => new PhysicalSize(s));\n  }\n  /**\n   * The physical size of the entire window.\n   * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const size = await getCurrentWindow().outerSize();\n   * ```\n   *\n   * @returns The window's outer size.\n   */\n  async outerSize() {\n    return invoke('plugin:window|outer_size', {\n      label: this.label\n    }).then(s => new PhysicalSize(s));\n  }\n  /**\n   * Gets the window's current fullscreen state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const fullscreen = await getCurrentWindow().isFullscreen();\n   * ```\n   *\n   * @returns Whether the window is in fullscreen mode or not.\n   */\n  async isFullscreen() {\n    return invoke('plugin:window|is_fullscreen', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current minimized state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const minimized = await getCurrentWindow().isMinimized();\n   * ```\n   */\n  async isMinimized() {\n    return invoke('plugin:window|is_minimized', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current maximized state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const maximized = await getCurrentWindow().isMaximized();\n   * ```\n   *\n   * @returns Whether the window is maximized or not.\n   */\n  async isMaximized() {\n    return invoke('plugin:window|is_maximized', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current focus state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const focused = await getCurrentWindow().isFocused();\n   * ```\n   *\n   * @returns Whether the window is focused or not.\n   */\n  async isFocused() {\n    return invoke('plugin:window|is_focused', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current decorated state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const decorated = await getCurrentWindow().isDecorated();\n   * ```\n   *\n   * @returns Whether the window is decorated or not.\n   */\n  async isDecorated() {\n    return invoke('plugin:window|is_decorated', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current resizable state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const resizable = await getCurrentWindow().isResizable();\n   * ```\n   *\n   * @returns Whether the window is resizable or not.\n   */\n  async isResizable() {\n    return invoke('plugin:window|is_resizable', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's native maximize button state.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const maximizable = await getCurrentWindow().isMaximizable();\n   * ```\n   *\n   * @returns Whether the window's native maximize button is enabled or not.\n   */\n  async isMaximizable() {\n    return invoke('plugin:window|is_maximizable', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's native minimize button state.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const minimizable = await getCurrentWindow().isMinimizable();\n   * ```\n   *\n   * @returns Whether the window's native minimize button is enabled or not.\n   */\n  async isMinimizable() {\n    return invoke('plugin:window|is_minimizable', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's native close button state.\n   *\n   * #### Platform-specific\n   *\n   * - **iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const closable = await getCurrentWindow().isClosable();\n   * ```\n   *\n   * @returns Whether the window's native close button is enabled or not.\n   */\n  async isClosable() {\n    return invoke('plugin:window|is_closable', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current visible state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const visible = await getCurrentWindow().isVisible();\n   * ```\n   *\n   * @returns Whether the window is visible or not.\n   */\n  async isVisible() {\n    return invoke('plugin:window|is_visible', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current title.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const title = await getCurrentWindow().title();\n   * ```\n   */\n  async title() {\n    return invoke('plugin:window|title', {\n      label: this.label\n    });\n  }\n  /**\n   * Gets the window's current theme.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const theme = await getCurrentWindow().theme();\n   * ```\n   *\n   * @returns The window theme.\n   */\n  async theme() {\n    return invoke('plugin:window|theme', {\n      label: this.label\n    });\n  }\n  /**\n   * Whether the window is configured to be always on top of other windows or not.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const alwaysOnTop = await getCurrentWindow().isAlwaysOnTop();\n   * ```\n   *\n   * @returns Whether the window is visible or not.\n   */\n  async isAlwaysOnTop() {\n    return invoke('plugin:window|is_always_on_top', {\n      label: this.label\n    });\n  }\n  // Setters\n  /**\n   * Centers the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().center();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async center() {\n    return invoke('plugin:window|center', {\n      label: this.label\n    });\n  }\n  /**\n   *  Requests user attention to the window, this has no effect if the application\n   * is already focused. How requesting for user attention manifests is platform dependent,\n   * see `UserAttentionType` for details.\n   *\n   * Providing `null` will unset the request for user attention. Unsetting the request for\n   * user attention might not be done automatically by the WM when the window receives input.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** `null` has no effect.\n   * - **Linux:** Urgency levels have the same effect.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().requestUserAttention();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async requestUserAttention(requestType) {\n    let requestType_ = null;\n    if (requestType) {\n      if (requestType === UserAttentionType.Critical) {\n        requestType_ = {\n          type: 'Critical'\n        };\n      } else {\n        requestType_ = {\n          type: 'Informational'\n        };\n      }\n    }\n    return invoke('plugin:window|request_user_attention', {\n      label: this.label,\n      value: requestType_\n    });\n  }\n  /**\n   * Updates the window resizable flag.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setResizable(false);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setResizable(resizable) {\n    return invoke('plugin:window|set_resizable', {\n      label: this.label,\n      value: resizable\n    });\n  }\n  /**\n   * Enable or disable the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setEnabled(false);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   *\n   * @since 2.0.0\n   */\n  async setEnabled(enabled) {\n    return invoke('plugin:window|set_enabled', {\n      label: this.label,\n      value: enabled\n    });\n  }\n  /**\n   * Whether the window is enabled or disabled.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setEnabled(false);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   *\n   * @since 2.0.0\n   */\n  async isEnabled() {\n    return invoke('plugin:window|is_enabled', {\n      label: this.label\n    });\n  }\n  /**\n   * Sets whether the window's native maximize button is enabled or not.\n   * If resizable is set to false, this setting is ignored.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setMaximizable(false);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMaximizable(maximizable) {\n    return invoke('plugin:window|set_maximizable', {\n      label: this.label,\n      value: maximizable\n    });\n  }\n  /**\n   * Sets whether the window's native minimize button is enabled or not.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setMinimizable(false);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMinimizable(minimizable) {\n    return invoke('plugin:window|set_minimizable', {\n      label: this.label,\n      value: minimizable\n    });\n  }\n  /**\n   * Sets whether the window's native close button is enabled or not.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n   * - **iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setClosable(false);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setClosable(closable) {\n    return invoke('plugin:window|set_closable', {\n      label: this.label,\n      value: closable\n    });\n  }\n  /**\n   * Sets the window title.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setTitle('Tauri');\n   * ```\n   *\n   * @param title The new title\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setTitle(title) {\n    return invoke('plugin:window|set_title', {\n      label: this.label,\n      value: title\n    });\n  }\n  /**\n   * Maximizes the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().maximize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async maximize() {\n    return invoke('plugin:window|maximize', {\n      label: this.label\n    });\n  }\n  /**\n   * Unmaximizes the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().unmaximize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async unmaximize() {\n    return invoke('plugin:window|unmaximize', {\n      label: this.label\n    });\n  }\n  /**\n   * Toggles the window maximized state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().toggleMaximize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async toggleMaximize() {\n    return invoke('plugin:window|toggle_maximize', {\n      label: this.label\n    });\n  }\n  /**\n   * Minimizes the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().minimize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async minimize() {\n    return invoke('plugin:window|minimize', {\n      label: this.label\n    });\n  }\n  /**\n   * Unminimizes the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().unminimize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async unminimize() {\n    return invoke('plugin:window|unminimize', {\n      label: this.label\n    });\n  }\n  /**\n   * Sets the window visibility to true.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().show();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async show() {\n    return invoke('plugin:window|show', {\n      label: this.label\n    });\n  }\n  /**\n   * Sets the window visibility to false.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().hide();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async hide() {\n    return invoke('plugin:window|hide', {\n      label: this.label\n    });\n  }\n  /**\n   * Closes the window.\n   *\n   * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().close();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async close() {\n    return invoke('plugin:window|close', {\n      label: this.label\n    });\n  }\n  /**\n   * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().destroy();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async destroy() {\n    return invoke('plugin:window|destroy', {\n      label: this.label\n    });\n  }\n  /**\n   * Whether the window should have borders and bars.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setDecorations(false);\n   * ```\n   *\n   * @param decorations Whether the window should have borders and bars.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setDecorations(decorations) {\n    return invoke('plugin:window|set_decorations', {\n      label: this.label,\n      value: decorations\n    });\n  }\n  /**\n   * Whether or not the window should have shadow.\n   *\n   * #### Platform-specific\n   *\n   * - **Windows:**\n   *   - `false` has no effect on decorated window, shadows are always ON.\n   *   - `true` will make undecorated window have a 1px white border,\n   * and on Windows 11, it will have a rounded corners.\n   * - **Linux:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setShadow(false);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setShadow(enable) {\n    return invoke('plugin:window|set_shadow', {\n      label: this.label,\n      value: enable\n    });\n  }\n  /**\n   * Set window effects.\n   */\n  async setEffects(effects) {\n    return invoke('plugin:window|set_effects', {\n      label: this.label,\n      value: effects\n    });\n  }\n  /**\n   * Clear any applied effects if possible.\n   */\n  async clearEffects() {\n    return invoke('plugin:window|set_effects', {\n      label: this.label,\n      value: null\n    });\n  }\n  /**\n   * Whether the window should always be on top of other windows.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setAlwaysOnTop(true);\n   * ```\n   *\n   * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setAlwaysOnTop(alwaysOnTop) {\n    return invoke('plugin:window|set_always_on_top', {\n      label: this.label,\n      value: alwaysOnTop\n    });\n  }\n  /**\n   * Whether the window should always be below other windows.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setAlwaysOnBottom(true);\n   * ```\n   *\n   * @param alwaysOnBottom Whether the window should always be below other windows or not.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setAlwaysOnBottom(alwaysOnBottom) {\n    return invoke('plugin:window|set_always_on_bottom', {\n      label: this.label,\n      value: alwaysOnBottom\n    });\n  }\n  /**\n   * Prevents the window contents from being captured by other apps.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setContentProtected(true);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setContentProtected(protected_) {\n    return invoke('plugin:window|set_content_protected', {\n      label: this.label,\n      value: protected_\n    });\n  }\n  /**\n   * Resizes the window with a new inner size.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setSize(new LogicalSize(600, 500));\n   * ```\n   *\n   * @param size The logical or physical inner size.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setSize(size) {\n    return invoke('plugin:window|set_size', {\n      label: this.label,\n      value: size instanceof Size ? size : new Size(size)\n    });\n  }\n  /**\n   * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow, PhysicalSize } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setMinSize(new PhysicalSize(600, 500));\n   * ```\n   *\n   * @param size The logical or physical inner size, or `null` to unset the constraint.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMinSize(size) {\n    return invoke('plugin:window|set_min_size', {\n      label: this.label,\n      value: size instanceof Size ? size : size ? new Size(size) : null\n    });\n  }\n  /**\n   * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setMaxSize(new LogicalSize(600, 500));\n   * ```\n   *\n   * @param size The logical or physical inner size, or `null` to unset the constraint.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMaxSize(size) {\n    return invoke('plugin:window|set_max_size', {\n      label: this.label,\n      value: size instanceof Size ? size : size ? new Size(size) : null\n    });\n  }\n  /**\n   * Sets the window inner size constraints.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setSizeConstraints({ minWidth: 300 });\n   * ```\n   *\n   * @param constraints The logical or physical inner size, or `null` to unset the constraint.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setSizeConstraints(constraints) {\n    function logical(pixel) {\n      return pixel ? {\n        Logical: pixel\n      } : null;\n    }\n    return invoke('plugin:window|set_size_constraints', {\n      label: this.label,\n      value: {\n        minWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minWidth),\n        minHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minHeight),\n        maxWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxWidth),\n        maxHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxHeight)\n      }\n    });\n  }\n  /**\n   * Sets the window outer position.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setPosition(new LogicalPosition(600, 500));\n   * ```\n   *\n   * @param position The new position, in logical or physical pixels.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setPosition(position) {\n    return invoke('plugin:window|set_position', {\n      label: this.label,\n      value: position instanceof Position ? position : new Position(position)\n    });\n  }\n  /**\n   * Sets the window fullscreen state.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setFullscreen(true);\n   * ```\n   *\n   * @param fullscreen Whether the window should go to fullscreen or not.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setFullscreen(fullscreen) {\n    return invoke('plugin:window|set_fullscreen', {\n      label: this.label,\n      value: fullscreen\n    });\n  }\n  /**\n   * Bring the window to front and focus.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setFocus();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setFocus() {\n    return invoke('plugin:window|set_focus', {\n      label: this.label\n    });\n  }\n  /**\n   * Sets the window icon.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setIcon('/tauri/awesome.png');\n   * ```\n   *\n   * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n   * To enable it, change your Cargo.toml file:\n   * ```toml\n   * [dependencies]\n   * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n   * ```\n   *\n   * @param icon Icon bytes or path to the icon file.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setIcon(icon) {\n    return invoke('plugin:window|set_icon', {\n      label: this.label,\n      value: transformImage(icon)\n    });\n  }\n  /**\n   * Whether the window icon should be hidden from the taskbar or not.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** Unsupported.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setSkipTaskbar(true);\n   * ```\n   *\n   * @param skip true to hide window icon, false to show it.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setSkipTaskbar(skip) {\n    return invoke('plugin:window|set_skip_taskbar', {\n      label: this.label,\n      value: skip\n    });\n  }\n  /**\n   * Grabs the cursor, preventing it from leaving the window.\n   *\n   * There's no guarantee that the cursor will be hidden. You should\n   * hide it by yourself if you want so.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux:** Unsupported.\n   * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setCursorGrab(true);\n   * ```\n   *\n   * @param grab `true` to grab the cursor icon, `false` to release it.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorGrab(grab) {\n    return invoke('plugin:window|set_cursor_grab', {\n      label: this.label,\n      value: grab\n    });\n  }\n  /**\n   * Modifies the cursor's visibility.\n   *\n   * #### Platform-specific\n   *\n   * - **Windows:** The cursor is only hidden within the confines of the window.\n   * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n   *   outside of the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setCursorVisible(false);\n   * ```\n   *\n   * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorVisible(visible) {\n    return invoke('plugin:window|set_cursor_visible', {\n      label: this.label,\n      value: visible\n    });\n  }\n  /**\n   * Modifies the cursor icon of the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setCursorIcon('help');\n   * ```\n   *\n   * @param icon The new cursor icon.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorIcon(icon) {\n    return invoke('plugin:window|set_cursor_icon', {\n      label: this.label,\n      value: icon\n    });\n  }\n  /**\n   * Sets the window background color.\n   *\n   * #### Platform-specific:\n   *\n   * - **Windows:** alpha channel is ignored.\n   * - **iOS / Android:** Unsupported.\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   *\n   * @since 2.1.0\n   */\n  async setBackgroundColor(color) {\n    return invoke('plugin:window|set_background_color', {\n      color\n    });\n  }\n  /**\n   * Changes the position of the cursor in window coordinates.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setCursorPosition(new LogicalPosition(600, 300));\n   * ```\n   *\n   * @param position The new cursor position.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorPosition(position) {\n    return invoke('plugin:window|set_cursor_position', {\n      label: this.label,\n      value: position instanceof Position ? position : new Position(position)\n    });\n  }\n  /**\n   * Changes the cursor events behavior.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setIgnoreCursorEvents(true);\n   * ```\n   *\n   * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setIgnoreCursorEvents(ignore) {\n    return invoke('plugin:window|set_ignore_cursor_events', {\n      label: this.label,\n      value: ignore\n    });\n  }\n  /**\n   * Starts dragging the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().startDragging();\n   * ```\n   *\n   * @return A promise indicating the success or failure of the operation.\n   */\n  async startDragging() {\n    return invoke('plugin:window|start_dragging', {\n      label: this.label\n    });\n  }\n  /**\n   * Starts resize-dragging the window.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().startResizeDragging();\n   * ```\n   *\n   * @return A promise indicating the success or failure of the operation.\n   */\n  async startResizeDragging(direction) {\n    return invoke('plugin:window|start_resize_dragging', {\n      label: this.label,\n      value: direction\n    });\n  }\n  /**\n   * Sets the badge count. It is app wide and not specific to this window.\n   *\n   * #### Platform-specific\n   *\n   * - **Windows**: Unsupported. Use @{linkcode Window.setOverlayIcon} instead.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setBadgeCount(5);\n   * ```\n   *\n   * @param count The badge count. Use `undefined` to remove the badge.\n   * @return A promise indicating the success or failure of the operation.\n   */\n  async setBadgeCount(count) {\n    return invoke('plugin:window|set_badge_count', {\n      label: this.label,\n      value: count\n    });\n  }\n  /**\n   * Sets the badge cont **macOS only**.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setBadgeLabel(\"Hello\");\n   * ```\n   *\n   * @param label The badge label. Use `undefined` to remove the badge.\n   * @return A promise indicating the success or failure of the operation.\n   */\n  async setBadgeLabel(label) {\n    return invoke('plugin:window|set_badge_label', {\n      label: this.label,\n      value: label\n    });\n  }\n  /**\n   * Sets the overlay icon. **Windows only**\n   * The overlay icon can be set for every window.\n   *\n   *\n   * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n   * To enable it, change your Cargo.toml file:\n   *\n   * ```toml\n   * [dependencies]\n   * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n   * ```\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setOverlayIcon(\"/tauri/awesome.png\");\n   * ```\n   *\n   * @param icon Icon bytes or path to the icon file. Use `undefined` to remove the overlay icon.\n   * @return A promise indicating the success or failure of the operation.\n   */\n  async setOverlayIcon(icon) {\n    return invoke('plugin:window|set_overlay_icon', {\n      label: this.label,\n      value: icon ? transformImage(icon) : undefined\n    });\n  }\n  /**\n   * Sets the taskbar progress state.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\n   * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow, ProgressBarStatus } from '@tauri-apps/api/window';\n   * await getCurrentWindow().setProgressBar({\n   *   status: ProgressBarStatus.Normal,\n   *   progress: 50,\n   * });\n   * ```\n   *\n   * @return A promise indicating the success or failure of the operation.\n   */\n  async setProgressBar(state) {\n    return invoke('plugin:window|set_progress_bar', {\n      label: this.label,\n      value: state\n    });\n  }\n  /**\n   * Sets whether the window should be visible on all workspaces or virtual desktops.\n   *\n   * #### Platform-specific\n   *\n   * - **Windows / iOS / Android:** Unsupported.\n   *\n   * @since 2.0.0\n   */\n  async setVisibleOnAllWorkspaces(visible) {\n    return invoke('plugin:window|set_visible_on_all_workspaces', {\n      label: this.label,\n      value: visible\n    });\n  }\n  /**\n   * Sets the title bar style. **macOS only**.\n   *\n   * @since 2.0.0\n   */\n  async setTitleBarStyle(style) {\n    return invoke('plugin:window|set_title_bar_style', {\n      label: this.label,\n      value: style\n    });\n  }\n  /**\n   * Set window theme, pass in `null` or `undefined` to follow system theme\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / macOS**: Theme is app-wide and not specific to this window.\n   * - **iOS / Android:** Unsupported.\n   *\n   * @since 2.0.0\n   */\n  async setTheme(theme) {\n    return invoke('plugin:window|set_theme', {\n      label: this.label,\n      value: theme\n    });\n  }\n  // Listeners\n  /**\n   * Listen to window resize.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await getCurrentWindow().onResized(({ payload: size }) => {\n   *  console.log('Window resized', size);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onResized(handler) {\n    return this.listen(TauriEvent.WINDOW_RESIZED, e => {\n      e.payload = new PhysicalSize(e.payload);\n      handler(e);\n    });\n  }\n  /**\n   * Listen to window move.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await getCurrentWindow().onMoved(({ payload: position }) => {\n   *  console.log('Window moved', position);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onMoved(handler) {\n    return this.listen(TauriEvent.WINDOW_MOVED, e => {\n      e.payload = new PhysicalPosition(e.payload);\n      handler(e);\n    });\n  }\n  /**\n   * Listen to window close requested. Emitted when the user requests to closes the window.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n   * import { confirm } from '@tauri-apps/api/dialog';\n   * const unlisten = await getCurrentWindow().onCloseRequested(async (event) => {\n   *   const confirmed = await confirm('Are you sure?');\n   *   if (!confirmed) {\n   *     // user did not confirm closing the window; let's prevent it\n   *     event.preventDefault();\n   *   }\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onCloseRequested(handler) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, async event => {\n      const evt = new CloseRequestedEvent(event);\n      await handler(evt);\n      if (!evt.isPreventDefault()) {\n        await this.destroy();\n      }\n    });\n  }\n  /**\n   * Listen to a file drop event.\n   * The listener is triggered when the user hovers the selected files on the webview,\n   * drops the files or cancels the operation.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from \"@tauri-apps/api/webview\";\n   * const unlisten = await getCurrentWindow().onDragDropEvent((event) => {\n   *  if (event.payload.type === 'over') {\n   *    console.log('User hovering', event.payload.position);\n   *  } else if (event.payload.type === 'drop') {\n   *    console.log('User dropped', event.payload.paths);\n   *  } else {\n   *    console.log('File drop cancelled');\n   *  }\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onDragDropEvent(handler) {\n    const unlistenDrag = await this.listen(TauriEvent.DRAG_ENTER, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'enter',\n          paths: event.payload.paths,\n          position: new PhysicalPosition(event.payload.position)\n        }\n      });\n    });\n    const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'over',\n          position: new PhysicalPosition(event.payload.position)\n        }\n      });\n    });\n    const unlistenDrop = await this.listen(TauriEvent.DRAG_DROP, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'drop',\n          paths: event.payload.paths,\n          position: new PhysicalPosition(event.payload.position)\n        }\n      });\n    });\n    const unlistenCancel = await this.listen(TauriEvent.DRAG_LEAVE, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'leave'\n        }\n      });\n    });\n    return () => {\n      unlistenDrag();\n      unlistenDrop();\n      unlistenDragOver();\n      unlistenCancel();\n    };\n  }\n  /**\n   * Listen to window focus change.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await getCurrentWindow().onFocusChanged(({ payload: focused }) => {\n   *  console.log('Focus changed, window is focused? ' + focused);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onFocusChanged(handler) {\n    const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, event => {\n      handler({\n        ...event,\n        payload: true\n      });\n    });\n    const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, event => {\n      handler({\n        ...event,\n        payload: false\n      });\n    });\n    return () => {\n      unlistenFocus();\n      unlistenBlur();\n    };\n  }\n  /**\n   * Listen to window scale change. Emitted when the window's scale factor has changed.\n   * The following user actions can cause DPI changes:\n   * - Changing the display's resolution.\n   * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n   * - Moving the window to a display with a different scale factor.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await getCurrentWindow().onScaleChanged(({ payload }) => {\n   *  console.log('Scale changed', payload.scaleFactor, payload.size);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onScaleChanged(handler) {\n    return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n  }\n  /**\n   * Listen to the system theme change.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await getCurrentWindow().onThemeChanged(({ payload: theme }) => {\n   *  console.log('New theme: ' + theme);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onThemeChanged(handler) {\n    return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n  }\n}\n/**\n * Background throttling policy\n *\n * @since 2.0.0\n */\nvar BackgroundThrottlingPolicy;\n(function (BackgroundThrottlingPolicy) {\n  BackgroundThrottlingPolicy[\"Disabled\"] = \"disabled\";\n  BackgroundThrottlingPolicy[\"Throttle\"] = \"throttle\";\n  BackgroundThrottlingPolicy[\"Suspend\"] = \"suspend\";\n})(BackgroundThrottlingPolicy || (BackgroundThrottlingPolicy = {}));\n/**\n * Platform-specific window effects\n *\n * @since 2.0.0\n */\nvar Effect;\n(function (Effect) {\n  /**\n   * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n   *\n   * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n   */\n  Effect[\"AppearanceBased\"] = \"appearanceBased\";\n  /**\n   *  **macOS 10.14-**\n   *\n   * @deprecated since macOS 10.14. Use a semantic material instead.\n   */\n  Effect[\"Light\"] = \"light\";\n  /**\n   *  **macOS 10.14-**\n   *\n   * @deprecated since macOS 10.14. Use a semantic material instead.\n   */\n  Effect[\"Dark\"] = \"dark\";\n  /**\n   *  **macOS 10.14-**\n   *\n   * @deprecated since macOS 10.14. Use a semantic material instead.\n   */\n  Effect[\"MediumLight\"] = \"mediumLight\";\n  /**\n   *  **macOS 10.14-**\n   *\n   * @deprecated since macOS 10.14. Use a semantic material instead.\n   */\n  Effect[\"UltraDark\"] = \"ultraDark\";\n  /**\n   *  **macOS 10.10+**\n   */\n  Effect[\"Titlebar\"] = \"titlebar\";\n  /**\n   *  **macOS 10.10+**\n   */\n  Effect[\"Selection\"] = \"selection\";\n  /**\n   *  **macOS 10.11+**\n   */\n  Effect[\"Menu\"] = \"menu\";\n  /**\n   *  **macOS 10.11+**\n   */\n  Effect[\"Popover\"] = \"popover\";\n  /**\n   *  **macOS 10.11+**\n   */\n  Effect[\"Sidebar\"] = \"sidebar\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"HeaderView\"] = \"headerView\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"Sheet\"] = \"sheet\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"WindowBackground\"] = \"windowBackground\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"HudWindow\"] = \"hudWindow\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"Tooltip\"] = \"tooltip\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"ContentBackground\"] = \"contentBackground\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n  /**\n   *  **macOS 10.14+**\n   */\n  Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n  /**\n   *  **Windows 11 Only**\n   */\n  Effect[\"Mica\"] = \"mica\";\n  /**\n   * **Windows 7/10/11(22H1) Only**\n   *\n   * #### Notes\n   *\n   * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n   */\n  Effect[\"Blur\"] = \"blur\";\n  /**\n   * **Windows 10/11**\n   *\n   * #### Notes\n   *\n   * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n   */\n  Effect[\"Acrylic\"] = \"acrylic\";\n  /**\n   * Tabbed effect that matches the system dark perefence **Windows 11 Only**\n   */\n  Effect[\"Tabbed\"] = \"tabbed\";\n  /**\n   * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\n   */\n  Effect[\"TabbedDark\"] = \"tabbedDark\";\n  /**\n   * Tabbed effect with light mode **Windows 11 Only**\n   */\n  Effect[\"TabbedLight\"] = \"tabbedLight\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0.0\n */\nvar EffectState;\n(function (EffectState) {\n  /**\n   *  Make window effect state follow the window's active state **macOS only**\n   */\n  EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n  /**\n   *  Make window effect state always active **macOS only**\n   */\n  EffectState[\"Active\"] = \"active\";\n  /**\n   *  Make window effect state always inactive **macOS only**\n   */\n  EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n  return m === null ? null : {\n    name: m.name,\n    scaleFactor: m.scaleFactor,\n    position: new PhysicalPosition(m.position),\n    size: new PhysicalSize(m.size),\n    workArea: {\n      position: new PhysicalPosition(m.workArea.position),\n      size: new PhysicalSize(m.workArea.size)\n    }\n  };\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = await currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n  return invoke('plugin:window|current_monitor').then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = await primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n  return invoke('plugin:window|primary_monitor').then(mapMonitor);\n}\n/**\n * Returns the monitor that contains the given point. Returns `null` if can't find any.\n * @example\n * ```typescript\n * import { monitorFromPoint } from '@tauri-apps/api/window';\n * const monitor = await monitorFromPoint(100.0, 200.0);\n * ```\n *\n * @since 1.0.0\n */\nasync function monitorFromPoint(x, y) {\n  return invoke('plugin:window|monitor_from_point', {\n    x,\n    y\n  }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = await availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n  return invoke('plugin:window|available_monitors').then(ms => ms.map(mapMonitor));\n}\n/**\n * Get the cursor position relative to the top-left hand corner of the desktop.\n *\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\n * If the user uses a desktop with multiple monitors,\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\n * or the top-left of the leftmost monitor on X11.\n *\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\n */\nasync function cursorPosition() {\n  return invoke('plugin:window|cursor_position').then(v => new PhysicalPosition(v));\n}\nexport { CloseRequestedEvent, Effect, EffectState, PhysicalPosition, PhysicalSize, ProgressBarStatus, UserAttentionType, Window, availableMonitors, currentMonitor, cursorPosition, getAllWindows, getCurrentWindow, monitorFromPoint, primaryMonitor };","map":{"version":3,"names":["PhysicalPosition","PhysicalSize","Size","Position","LogicalPosition","LogicalSize","listen","once","emit","emitTo","TauriEvent","invoke","transformImage","UserAttentionType","CloseRequestedEvent","constructor","event","_preventDefault","id","preventDefault","isPreventDefault","ProgressBarStatus","getCurrentWindow","Window","window","__TAURI_INTERNALS__","metadata","currentWindow","label","skip","getAllWindows","then","windows","map","w","localTauriEvents","options","arguments","length","undefined","_a","listeners","Object","create","parent","catch","e","getByLabel","find","getCurrent","getAll","getFocusedWindow","isFocused","handler","_handleTauriEvent","splice","indexOf","target","kind","payload","includes","push","scaleFactor","innerPosition","p","outerPosition","innerSize","s","outerSize","isFullscreen","isMinimized","isMaximized","isDecorated","isResizable","isMaximizable","isMinimizable","isClosable","isVisible","title","theme","isAlwaysOnTop","center","requestUserAttention","requestType","requestType_","Critical","type","value","setResizable","resizable","setEnabled","enabled","isEnabled","setMaximizable","maximizable","setMinimizable","minimizable","setClosable","closable","setTitle","maximize","unmaximize","toggleMaximize","minimize","unminimize","show","hide","close","destroy","setDecorations","decorations","setShadow","enable","setEffects","effects","clearEffects","setAlwaysOnTop","alwaysOnTop","setAlwaysOnBottom","alwaysOnBottom","setContentProtected","protected_","setSize","size","setMinSize","setMaxSize","setSizeConstraints","constraints","logical","pixel","Logical","minWidth","minHeight","maxWidth","maxHeight","setPosition","position","setFullscreen","fullscreen","setFocus","setIcon","icon","setSkipTaskbar","setCursorGrab","grab","setCursorVisible","visible","setCursorIcon","setBackgroundColor","color","setCursorPosition","setIgnoreCursorEvents","ignore","startDragging","startResizeDragging","direction","setBadgeCount","count","setBadgeLabel","setOverlayIcon","setProgressBar","state","setVisibleOnAllWorkspaces","setTitleBarStyle","style","setTheme","onResized","WINDOW_RESIZED","onMoved","WINDOW_MOVED","onCloseRequested","WINDOW_CLOSE_REQUESTED","evt","onDragDropEvent","unlistenDrag","DRAG_ENTER","paths","unlistenDragOver","DRAG_OVER","unlistenDrop","DRAG_DROP","unlistenCancel","DRAG_LEAVE","onFocusChanged","unlistenFocus","WINDOW_FOCUS","unlistenBlur","WINDOW_BLUR","onScaleChanged","WINDOW_SCALE_FACTOR_CHANGED","onThemeChanged","WINDOW_THEME_CHANGED","BackgroundThrottlingPolicy","Effect","EffectState","mapMonitor","m","name","workArea","currentMonitor","primaryMonitor","monitorFromPoint","x","y","availableMonitors","ms","cursorPosition","v"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/window.js"],"sourcesContent":["import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nexport { LogicalPosition, LogicalSize } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { transformImage } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * #### Window events\n *\n * Events can be listened to using {@link Window.listen}:\n * ```typescript\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n * getCurrentWindow().listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\nvar ProgressBarStatus;\n(function (ProgressBarStatus) {\n    /**\n     * Hide progress bar.\n     */\n    ProgressBarStatus[\"None\"] = \"none\";\n    /**\n     * Normal state.\n     */\n    ProgressBarStatus[\"Normal\"] = \"normal\";\n    /**\n     * Indeterminate state. **Treated as Normal on Linux and macOS**\n     */\n    ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\n    /**\n     * Paused state. **Treated as Normal on Linux**\n     */\n    ProgressBarStatus[\"Paused\"] = \"paused\";\n    /**\n     * Error state. **Treated as Normal on linux**\n     */\n    ProgressBarStatus[\"Error\"] = \"error\";\n})(ProgressBarStatus || (ProgressBarStatus = {}));\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 1.0.0\n */\nfunction getCurrentWindow() {\n    return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 1.0.0\n */\nasync function getAllWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new Window(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created window\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n *\n * const appWindow = new Window('theUniqueLabel');\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Window {\n    /**\n     * Creates a new Window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const appWindow = new Window('my-label');\n     * appWindow.once('tauri://created', function () {\n     *  // window successfully created\n     * });\n     * appWindow.once('tauri://error', function (e) {\n     *  // an error happened creating the window\n     * });\n     * ```\n     *\n     * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Window} instance to communicate with the window.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:window|create', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Window associated with the given label.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const mainWindow = Window.getByLabel('main');\n     * ```\n     *\n     * @param label The window label.\n     * @returns The Window instance to communicate with the window or null if the window doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Window` for the current window.\n     */\n    static getCurrent() {\n        return getCurrentWindow();\n    }\n    /**\n     * Gets a list of instances of `Window` for all available windows.\n     */\n    static async getAll() {\n        return getAllWindows();\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const focusedWindow = Window.getFocusedWindow();\n     * ```\n     *\n     * @returns The Window instance or `undefined` if there is not any focused window.\n     */\n    static async getFocusedWindow() {\n        for (const w of await getAllWindows()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n    /**\n     * Listen to an emitted event on this window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this window only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line security/detect-object-injection\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const factor = await getCurrentWindow().scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     */\n    async scaleFactor() {\n        return invoke('plugin:window|scale_factor', {\n            label: this.label\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     */\n    async innerPosition() {\n        return invoke('plugin:window|inner_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     */\n    async outerPosition() {\n        return invoke('plugin:window|outer_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invoke('plugin:window|inner_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invoke('plugin:window|outer_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await getCurrentWindow().isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     */\n    async isFullscreen() {\n        return invoke('plugin:window|is_fullscreen', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimized = await getCurrentWindow().isMinimized();\n     * ```\n     */\n    async isMinimized() {\n        return invoke('plugin:window|is_minimized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximized = await getCurrentWindow().isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     */\n    async isMaximized() {\n        return invoke('plugin:window|is_maximized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const focused = await getCurrentWindow().isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     */\n    async isFocused() {\n        return invoke('plugin:window|is_focused', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const decorated = await getCurrentWindow().isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     */\n    async isDecorated() {\n        return invoke('plugin:window|is_decorated', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const resizable = await getCurrentWindow().isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     */\n    async isResizable() {\n        return invoke('plugin:window|is_resizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximizable = await getCurrentWindow().isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     */\n    async isMaximizable() {\n        return invoke('plugin:window|is_maximizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimizable = await getCurrentWindow().isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     */\n    async isMinimizable() {\n        return invoke('plugin:window|is_minimizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const closable = await getCurrentWindow().isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     */\n    async isClosable() {\n        return invoke('plugin:window|is_closable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const visible = await getCurrentWindow().isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isVisible() {\n        return invoke('plugin:window|is_visible', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const title = await getCurrentWindow().title();\n     * ```\n     */\n    async title() {\n        return invoke('plugin:window|title', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const theme = await getCurrentWindow().theme();\n     * ```\n     *\n     * @returns The window theme.\n     */\n    async theme() {\n        return invoke('plugin:window|theme', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window is configured to be always on top of other windows or not.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const alwaysOnTop = await getCurrentWindow().isAlwaysOnTop();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isAlwaysOnTop() {\n        return invoke('plugin:window|is_always_on_top', {\n            label: this.label\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invoke('plugin:window|center', {\n            label: this.label\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().requestUserAttention();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invoke('plugin:window|request_user_attention', {\n            label: this.label,\n            value: requestType_\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setResizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invoke('plugin:window|set_resizable', {\n            label: this.label,\n            value: resizable\n        });\n    }\n    /**\n     * Enable or disable the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setEnabled(enabled) {\n        return invoke('plugin:window|set_enabled', {\n            label: this.label,\n            value: enabled\n        });\n    }\n    /**\n     * Whether the window is enabled or disabled.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async isEnabled() {\n        return invoke('plugin:window|is_enabled', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaximizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invoke('plugin:window|set_maximizable', {\n            label: this.label,\n            value: maximizable\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinimizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invoke('plugin:window|set_minimizable', {\n            label: this.label,\n            value: minimizable\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setClosable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invoke('plugin:window|set_closable', {\n            label: this.label,\n            value: closable\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invoke('plugin:window|set_title', {\n            label: this.label,\n            value: title\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invoke('plugin:window|maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invoke('plugin:window|unmaximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invoke('plugin:window|toggle_maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invoke('plugin:window|minimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invoke('plugin:window|unminimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:window|show', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:window|hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Closes the window.\n     *\n     * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:window|close', {\n            label: this.label\n        });\n    }\n    /**\n     * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().destroy();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async destroy() {\n        return invoke('plugin:window|destroy', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invoke('plugin:window|set_decorations', {\n            label: this.label,\n            value: decorations\n        });\n    }\n    /**\n     * Whether or not the window should have shadow.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:**\n     *   - `false` has no effect on decorated window, shadows are always ON.\n     *   - `true` will make undecorated window have a 1px white border,\n     * and on Windows 11, it will have a rounded corners.\n     * - **Linux:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setShadow(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setShadow(enable) {\n        return invoke('plugin:window|set_shadow', {\n            label: this.label,\n            value: enable\n        });\n    }\n    /**\n     * Set window effects.\n     */\n    async setEffects(effects) {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: effects\n        });\n    }\n    /**\n     * Clear any applied effects if possible.\n     */\n    async clearEffects() {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: null\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invoke('plugin:window|set_always_on_top', {\n            label: this.label,\n            value: alwaysOnTop\n        });\n    }\n    /**\n     * Whether the window should always be below other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnBottom(true);\n     * ```\n     *\n     * @param alwaysOnBottom Whether the window should always be below other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnBottom(alwaysOnBottom) {\n        return invoke('plugin:window|set_always_on_bottom', {\n            label: this.label,\n            value: alwaysOnBottom\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setContentProtected(protected_) {\n        return invoke('plugin:window|set_content_protected', {\n            label: this.label,\n            value: protected_\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:window|set_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        return invoke('plugin:window|set_min_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        return invoke('plugin:window|set_max_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window inner size constraints.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSizeConstraints({ minWidth: 300 });\n     * ```\n     *\n     * @param constraints The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSizeConstraints(constraints) {\n        function logical(pixel) {\n            return pixel ? { Logical: pixel } : null;\n        }\n        return invoke('plugin:window|set_size_constraints', {\n            label: this.label,\n            value: {\n                minWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minWidth),\n                minHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minHeight),\n                maxWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxWidth),\n                maxHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxHeight)\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:window|set_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invoke('plugin:window|set_fullscreen', {\n            label: this.label,\n            value: fullscreen\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:window|set_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invoke('plugin:window|set_icon', {\n            label: this.label,\n            value: transformImage(icon)\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invoke('plugin:window|set_skip_taskbar', {\n            label: this.label,\n            value: skip\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invoke('plugin:window|set_cursor_grab', {\n            label: this.label,\n            value: grab\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invoke('plugin:window|set_cursor_visible', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invoke('plugin:window|set_cursor_icon', {\n            label: this.label,\n            value: icon\n        });\n    }\n    /**\n     * Sets the window background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows:** alpha channel is ignored.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        return invoke('plugin:window|set_cursor_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invoke('plugin:window|set_ignore_cursor_events', {\n            label: this.label,\n            value: ignore\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invoke('plugin:window|start_dragging', {\n            label: this.label\n        });\n    }\n    /**\n     * Starts resize-dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startResizeDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startResizeDragging(direction) {\n        return invoke('plugin:window|start_resize_dragging', {\n            label: this.label,\n            value: direction\n        });\n    }\n    /**\n     * Sets the badge count. It is app wide and not specific to this window.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows**: Unsupported. Use @{linkcode Window.setOverlayIcon} instead.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeCount(5);\n     * ```\n     *\n     * @param count The badge count. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeCount(count) {\n        return invoke('plugin:window|set_badge_count', {\n            label: this.label,\n            value: count\n        });\n    }\n    /**\n     * Sets the badge cont **macOS only**.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeLabel(\"Hello\");\n     * ```\n     *\n     * @param label The badge label. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeLabel(label) {\n        return invoke('plugin:window|set_badge_label', {\n            label: this.label,\n            value: label\n        });\n    }\n    /**\n     * Sets the overlay icon. **Windows only**\n     * The overlay icon can be set for every window.\n     *\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     *\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setOverlayIcon(\"/tauri/awesome.png\");\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file. Use `undefined` to remove the overlay icon.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setOverlayIcon(icon) {\n        return invoke('plugin:window|set_overlay_icon', {\n            label: this.label,\n            value: icon ? transformImage(icon) : undefined\n        });\n    }\n    /**\n     * Sets the taskbar progress state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\n     * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, ProgressBarStatus } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setProgressBar({\n     *   status: ProgressBarStatus.Normal,\n     *   progress: 50,\n     * });\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setProgressBar(state) {\n        return invoke('plugin:window|set_progress_bar', {\n            label: this.label,\n            value: state\n        });\n    }\n    /**\n     * Sets whether the window should be visible on all workspaces or virtual desktops.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows / iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setVisibleOnAllWorkspaces(visible) {\n        return invoke('plugin:window|set_visible_on_all_workspaces', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Sets the title bar style. **macOS only**.\n     *\n     * @since 2.0.0\n     */\n    async setTitleBarStyle(style) {\n        return invoke('plugin:window|set_title_bar_style', {\n            label: this.label,\n            value: style\n        });\n    }\n    /**\n     * Set window theme, pass in `null` or `undefined` to follow system theme\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Theme is app-wide and not specific to this window.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setTheme(theme) {\n        return invoke('plugin:window|set_theme', {\n            label: this.label,\n            value: theme\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = new PhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = new PhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await getCurrentWindow().onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onCloseRequested(handler) {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, async (event) => {\n            const evt = new CloseRequestedEvent(event);\n            await handler(evt);\n            if (!evt.isPreventDefault()) {\n                await this.destroy();\n            }\n        });\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWindow().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDrag = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDrag();\n            unlistenDrop();\n            unlistenDragOver();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * Background throttling policy\n *\n * @since 2.0.0\n */\nvar BackgroundThrottlingPolicy;\n(function (BackgroundThrottlingPolicy) {\n    BackgroundThrottlingPolicy[\"Disabled\"] = \"disabled\";\n    BackgroundThrottlingPolicy[\"Throttle\"] = \"throttle\";\n    BackgroundThrottlingPolicy[\"Suspend\"] = \"suspend\";\n})(BackgroundThrottlingPolicy || (BackgroundThrottlingPolicy = {}));\n/**\n * Platform-specific window effects\n *\n * @since 2.0.0\n */\nvar Effect;\n(function (Effect) {\n    /**\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n     */\n    Effect[\"AppearanceBased\"] = \"appearanceBased\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Light\"] = \"light\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Dark\"] = \"dark\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"MediumLight\"] = \"mediumLight\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"UltraDark\"] = \"ultraDark\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Titlebar\"] = \"titlebar\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Selection\"] = \"selection\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Menu\"] = \"menu\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Popover\"] = \"popover\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Sidebar\"] = \"sidebar\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HeaderView\"] = \"headerView\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Sheet\"] = \"sheet\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"WindowBackground\"] = \"windowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HudWindow\"] = \"hudWindow\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Tooltip\"] = \"tooltip\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"ContentBackground\"] = \"contentBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n    /**\n     *  **Windows 11 Only**\n     */\n    Effect[\"Mica\"] = \"mica\";\n    /**\n     * **Windows 7/10/11(22H1) Only**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n     */\n    Effect[\"Blur\"] = \"blur\";\n    /**\n     * **Windows 10/11**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n     */\n    Effect[\"Acrylic\"] = \"acrylic\";\n    /**\n     * Tabbed effect that matches the system dark perefence **Windows 11 Only**\n     */\n    Effect[\"Tabbed\"] = \"tabbed\";\n    /**\n     * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\n     */\n    Effect[\"TabbedDark\"] = \"tabbedDark\";\n    /**\n     * Tabbed effect with light mode **Windows 11 Only**\n     */\n    Effect[\"TabbedLight\"] = \"tabbedLight\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0.0\n */\nvar EffectState;\n(function (EffectState) {\n    /**\n     *  Make window effect state follow the window's active state **macOS only**\n     */\n    EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n    /**\n     *  Make window effect state always active **macOS only**\n     */\n    EffectState[\"Active\"] = \"active\";\n    /**\n     *  Make window effect state always inactive **macOS only**\n     */\n    EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: new PhysicalPosition(m.position),\n            size: new PhysicalSize(m.size),\n            workArea: {\n                position: new PhysicalPosition(m.workArea.position),\n                size: new PhysicalSize(m.workArea.size)\n            }\n        };\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = await currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invoke('plugin:window|current_monitor').then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = await primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invoke('plugin:window|primary_monitor').then(mapMonitor);\n}\n/**\n * Returns the monitor that contains the given point. Returns `null` if can't find any.\n * @example\n * ```typescript\n * import { monitorFromPoint } from '@tauri-apps/api/window';\n * const monitor = await monitorFromPoint(100.0, 200.0);\n * ```\n *\n * @since 1.0.0\n */\nasync function monitorFromPoint(x, y) {\n    return invoke('plugin:window|monitor_from_point', {\n        x,\n        y\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = await availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invoke('plugin:window|available_monitors').then((ms) => ms.map(mapMonitor));\n}\n/**\n * Get the cursor position relative to the top-left hand corner of the desktop.\n *\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\n * If the user uses a desktop with multiple monitors,\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\n * or the top-left of the leftmost monitor on X11.\n *\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\n */\nasync function cursorPosition() {\n    return invoke('plugin:window|cursor_position').then((v) => new PhysicalPosition(v));\n}\n\nexport { CloseRequestedEvent, Effect, EffectState, PhysicalPosition, PhysicalSize, ProgressBarStatus, UserAttentionType, Window, availableMonitors, currentMonitor, cursorPosition, getAllWindows, getCurrentWindow, monitorFromPoint, primaryMonitor };\n"],"mappings":"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A;AACA;AACA;AACA;AACA;EACI,MAAMwB,SAASA,CAAA,EAAG;IACd,OAAOzC,MAAM,CAAC,0BAA0B,EAAE;MACtCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM4C,WAAWA,CAAA,EAAG;IAChB,OAAO7D,MAAM,CAAC,4BAA4B,EAAE;MACxCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM6C,WAAWA,CAAA,EAAG;IAChB,OAAO9D,MAAM,CAAC,4BAA4B,EAAE;MACxCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM8C,aAAaA,CAAA,EAAG;IAClB,OAAO/D,MAAM,CAAC,8BAA8B,EAAE;MAC1CiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM+C,aAAaA,CAAA,EAAG;IAClB,OAAOhE,MAAM,CAAC,8BAA8B,EAAE;MAC1CiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMgD,UAAUA,CAAA,EAAG;IACf,OAAOjE,MAAM,CAAC,2BAA2B,EAAE;MACvCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMiD,SAASA,CAAA,EAAG;IACd,OAAOlE,MAAM,CAAC,0BAA0B,EAAE;MACtCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMkD,KAAKA,CAAA,EAAG;IACV,OAAOnE,MAAM,CAAC,qBAAqB,EAAE;MACjCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMmD,KAAKA,CAAA,EAAG;IACV,OAAOpE,MAAM,CAAC,qBAAqB,EAAE;MACjCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMoD,aAAaA,CAAA,EAAG;IAClB,OAAOrE,MAAM,CAAC,gCAAgC,EAAE;MAC5CiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMqD,MAAMA,CAAA,EAAG;IACX,OAAOtE,MAAM,CAAC,sBAAsB,EAAE;MAClCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMsD,oBAAoBA,CAACC,WAAW,EAAE;IACpC,IAAIC,YAAY,GAAG,IAAI;IACvB,IAAID,WAAW,EAAE;MACb,IAAIA,WAAW,KAAKtE,iBAAiB,CAACwE,QAAQ,EAAE;QAC5CD,YAAY,GAAG;UAAEE,IAAI,EAAE;QAAW,CAAC;MACvC,CAAC,MACI;QACDF,YAAY,GAAG;UAAEE,IAAI,EAAE;QAAgB,CAAC;MAC5C;IACJ;IACA,OAAO3E,MAAM,CAAC,sCAAsC,EAAE;MAClDiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEH;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMI,YAAYA,CAACC,SAAS,EAAE;IAC1B,OAAO9E,MAAM,CAAC,6BAA6B,EAAE;MACzCiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEE;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,UAAUA,CAACC,OAAO,EAAE;IACtB,OAAOhF,MAAM,CAAC,2BAA2B,EAAE;MACvCiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEI;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,SAASA,CAAA,EAAG;IACd,OAAOjF,MAAM,CAAC,0BAA0B,EAAE;MACtCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMiE,cAAcA,CAACC,WAAW,EAAE;IAC9B,OAAOnF,MAAM,CAAC,+BAA+B,EAAE;MAC3CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEO;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,cAAcA,CAACC,WAAW,EAAE;IAC9B,OAAOrF,MAAM,CAAC,+BAA+B,EAAE;MAC3CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAES;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,WAAWA,CAACC,QAAQ,EAAE;IACxB,OAAOvF,MAAM,CAAC,4BAA4B,EAAE;MACxCiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEW;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,Q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,MAAMC,aAAaA,CAACC,UAAU,EAAE;IAC5B,OAAO/H,MAAM,CAAC,8BAA8B,EAAE;MAC1CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEmD;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,QAAQA,CAAA,EAAG;IACb,OAAOhI,MAAM,CAAC,yBAAyB,EAAE;MACrCiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMgH,OAAOA,CAACC,IAAI,EAAE;IAChB,OAAOlI,MAAM,CAAC,wBAAwB,EAAE;MACpCiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAE3E,cAAc,CAACiI,IAAI;IAC9B,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,cAAcA,CAACjH,IAAI,EAAE;IACvB,OAAOlB,MAAM,CAAC,gCAAgC,EAAE;MAC5CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAE1D;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMkH,aAAaA,CAACC,IAAI,EAAE;IACtB,OAAOrI,MAAM,CAAC,+BAA+B,EAAE;MAC3CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEyD;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,gBAAgBA,CAACC,OAAO,EAAE;IAC5B,OAAOvI,MAAM,CAAC,kCAAkC,EAAE;MAC9CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAE2D;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,aAAaA,CAACN,IAAI,EAAE;IACtB,OAAOlI,MAAM,CAAC,+BAA+B,EAAE;MAC3CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEsD;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMO,kBAAkBA,CAACC,KAAK,EAAE;IAC5B,OAAO1I,MAAM,CAAC,oCAAoC,EAAE;MAAE0I;IAAM,CAAC,CAAC;EAClE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,iBAAiBA,CAACd,QAAQ,EAAE;IAC9B,OAAO7H,MAAM,CAAC,mCAAmC,EAAE;MAC/CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEiD,QAAQ,YAAYrI,QAAQ,GAAGqI,QAAQ,GAAG,IAAIrI,QAAQ,CAACqI,QAAQ;IAC1E,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMe,qBAAqBA,CAACC,MAAM,EAAE;IAChC,OAAO7I,MAAM,CAAC,wCAAwC,EAAE;MACpDiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEiE;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,aAAaA,CAAA,EAAG;IAClB,OAAO9I,MAAM,CAAC,8BAA8B,EAAE;MAC1CiB,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM8H,mBAAmBA,CAACC,SAAS,EAAE;IACjC,OAAOhJ,MAAM,CAAC,qCAAqC,EAAE;MACjDiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEoE;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,aAAaA,CAACC,KAAK,EAAE;IACvB,OAAOlJ,MAAM,CAAC,+BAA+B,EAAE;MAC3CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEsE;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,aAAaA,CAAClI,KAAK,EAAE;IACvB,OAAOjB,MAAM,CAAC,+BAA+B,EAAE;MAC3CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAE3D;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMmI,cAAcA,CAAClB,IAAI,EAAE;IACvB,OAAOlI,MAAM,CAAC,gCAAgC,EAAE;MAC5CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAEsD,IAAI,GAAGjI,cAAc,CAACiI,IAAI,CAAC,GAAGtG;IACzC,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMyH,cAAcA,CAACC,KAAK,EAAE;IACxB,OAAOtJ,MAAM,CAAC,gCAAgC,EAAE;MAC5CiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAE0E;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,yBAAyBA,CAAChB,OAAO,EAAE;IACrC,OAAOvI,MAAM,CAAC,6CAA6C,EAAE;MACzDiB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2D,KAAK,EAAE2D;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMiB,gBAAg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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}