{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lhaveman\\\\email-generator\\\\src\\\\components\\\\TemplateList\\\\TemplateList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { core } from '@tauri-apps/api';\nimport TemplateCard from '../TemplateCard/TemplateCard';\nimport styles from './TemplateList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateList = () => {\n  _s();\n  const [templates, setTemplates] = useState([]);\n  const [error, setError] = useState(null);\n  const [favourites, setFavourites] = useState({});\n  useEffect(() => {\n    core.invoke('load_templates').then(setTemplates).catch(err => {\n      console.error(err);\n      setError('Failed to load templates');\n    });\n    core.invoke('load_favourites').then(setFavourites).catch(err => {\n      console.error(err);\n      setError('Failed to load favourites');\n    });\n  }, []);\n\n  // It toggles the favourite status of a file\n  const toggleFavourite = filename => {\n    const current = !!favourites[filename]; // fallback: treat undefined as false\n    const updated = {\n      ...favourites,\n      [filename]: !current\n    }; // flip the value\n    setFavourites(updated); // update UI\n    core.invoke('save_favourites', {\n      favourites: updated\n    }); // save to JSON\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.heading,\n      children: \"Loaded Templates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), templates.map((template, index) => /*#__PURE__*/_jsxDEV(TemplateCard, {\n      name: template.name,\n      content: template.content,\n      lastModified: template.last_modified,\n      isFavourite: !!favourites[template.name] //fallback logic for file not listed in favourite\n      ,\n      toggleFavourite: toggleFavourite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateList, \"mEIxY4sJeDNjoAC9iiBwOIIiMjg=\");\n_c = TemplateList;\nexport default TemplateList;\nvar _c;\n$RefreshReg$(_c, \"TemplateList\");","map":{"version":3,"names":["React","useEffect","useState","core","TemplateCard","styles","jsxDEV","_jsxDEV","TemplateList","_s","templates","setTemplates","error","setError","favourites","setFavourites","invoke","then","catch","err","console","toggleFavourite","filename","current","updated","className","container","children","heading","fileName","_jsxFileName","lineNumber","columnNumber","map","template","index","name","content","lastModified","last_modified","isFavourite","_c","$RefreshReg$"],"sources":["C:/Users/lhaveman/email-generator/src/components/TemplateList/TemplateList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { core } from '@tauri-apps/api';\r\n\r\nimport TemplateCard from '../TemplateCard/TemplateCard';\r\nimport styles from './TemplateList.module.css';\r\n\r\ntype TemplateFile = {\r\n  name: string;\r\n  content: string;\r\n  last_modified: string;\r\n};\r\n\r\nconst TemplateList: React.FC = () => {\r\n  const [templates, setTemplates] = useState<TemplateFile[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [favourites, setFavourites] = useState<Record<string, boolean>>({});\r\n\r\n  useEffect(() => {\r\n    core.invoke<TemplateFile[]>('load_templates')\r\n      .then(setTemplates)\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError('Failed to load templates');\r\n      });\r\n\r\n    core.invoke<Record<string, boolean>>('load_favourites')\r\n      .then(setFavourites)\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError('Failed to load favourites');\r\n      });\r\n  }, []);\r\n\r\n    // It toggles the favourite status of a file\r\n    const toggleFavourite = (filename: string) => {\r\n      const current = !!favourites[filename]; // fallback: treat undefined as false\r\n      const updated = { ...favourites, [filename]: !current }; // flip the value\r\n      setFavourites(updated); // update UI\r\n      core.invoke('save_favourites', { favourites: updated }); // save to JSON\r\n    };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h3 className={styles.heading}>Loaded Templates</h3>\r\n      {error && <p className={styles.error}>{error}</p>}\r\n      {templates.map((template, index) => (\r\n        <TemplateCard\r\n          key={index}\r\n          name={template.name}\r\n          content={template.content}\r\n          lastModified={template.last_modified}\r\n          isFavourite={!!favourites[template.name]}             //fallback logic for file not listed in favourite\r\n          toggleFavourite={toggleFavourite}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemplateList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}