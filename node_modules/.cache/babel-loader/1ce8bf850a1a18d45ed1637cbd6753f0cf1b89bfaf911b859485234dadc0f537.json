{"ast":null,"code":"import { Resource, invoke, Channel } from './core.js';\nimport { transformImage } from './image.js';\nimport { PhysicalPosition, PhysicalSize } from './dpi.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Tray icon class and associated methods. This type constructor is private,\n * instead, you should use the static method {@linkcode TrayIcon.new}.\n *\n * #### Warning\n *\n * Unlike Rust, javascript does not have any way to run cleanup code\n * when an object is being removed by garbage collection, but this tray icon\n * will be cleaned up when the tauri app exists, however if you want to cleanup\n * this object early, you need to call {@linkcode TrayIcon.close}.\n *\n * @example\n * ```ts\n * import { TrayIcon } from '@tauri-apps/api/tray';\n * const tray = await TrayIcon.new({ tooltip: 'awesome tray tooltip' });\n * tray.set_tooltip('new tooltip');\n * ```\n */\nclass TrayIcon extends Resource {\n  constructor(rid, id) {\n    super(rid);\n    this.id = id;\n  }\n  /** Gets a tray icon using the provided id. */\n  static async getById(id) {\n    return invoke('plugin:tray|get_by_id', {\n      id\n    }).then(rid => rid ? new TrayIcon(rid, id) : null);\n  }\n  /**\n   * Removes a tray icon using the provided id from tauri's internal state.\n   *\n   * Note that this may cause the tray icon to disappear\n   * if it wasn't cloned somewhere else or referenced by JS.\n   */\n  static async removeById(id) {\n    return invoke('plugin:tray|remove_by_id', {\n      id\n    });\n  }\n  /**\n   * Creates a new {@linkcode TrayIcon}\n   *\n   * #### Platform-specific:\n   *\n   * - **Linux:** Sometimes the icon won't be visible unless a menu is set.\n   * Setting an empty {@linkcode Menu} is enough.\n   */\n  static async new(options) {\n    if (options === null || options === void 0 ? void 0 : options.menu) {\n      // @ts-expect-error we only need the rid and kind\n      options.menu = [options.menu.rid, options.menu.kind];\n    }\n    if (options === null || options === void 0 ? void 0 : options.icon) {\n      options.icon = transformImage(options.icon);\n    }\n    const handler = new Channel();\n    if (options === null || options === void 0 ? void 0 : options.action) {\n      const action = options.action;\n      handler.onmessage = e => action(mapEvent(e));\n      delete options.action;\n    }\n    return invoke('plugin:tray|new', {\n      options: options !== null && options !== void 0 ? options : {},\n      handler\n    }).then(_ref => {\n      let [rid, id] = _ref;\n      return new TrayIcon(rid, id);\n    });\n  }\n  /**\n   *  Sets a new tray icon. If `null` is provided, it will remove the icon.\n   *\n   * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n   * To enable it, change your Cargo.toml file:\n   * ```toml\n   * [dependencies]\n   * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n   * ```\n   */\n  async setIcon(icon) {\n    let trayIcon = null;\n    if (icon) {\n      trayIcon = transformImage(icon);\n    }\n    return invoke('plugin:tray|set_icon', {\n      rid: this.rid,\n      icon: trayIcon\n    });\n  }\n  /**\n   * Sets a new tray menu.\n   *\n   * #### Platform-specific:\n   *\n   * - **Linux**: once a menu is set it cannot be removed so `null` has no effect\n   */\n  async setMenu(menu) {\n    if (menu) {\n      // @ts-expect-error we only need the rid and kind\n      menu = [menu.rid, menu.kind];\n    }\n    return invoke('plugin:tray|set_menu', {\n      rid: this.rid,\n      menu\n    });\n  }\n  /**\n   * Sets the tooltip for this tray icon.\n   *\n   * #### Platform-specific:\n   *\n   * - **Linux:** Unsupported\n   */\n  async setTooltip(tooltip) {\n    return invoke('plugin:tray|set_tooltip', {\n      rid: this.rid,\n      tooltip\n    });\n  }\n  /**\n   * Sets the tooltip for this tray icon.\n   *\n   * #### Platform-specific:\n   *\n   * - **Linux:** The title will not be shown unless there is an icon\n   * as well.  The title is useful for numerical and other frequently\n   * updated information.  In general, it shouldn't be shown unless a\n   * user requests it as it can take up a significant amount of space\n   * on the user's panel.  This may not be shown in all visualizations.\n   * - **Windows:** Unsupported\n   */\n  async setTitle(title) {\n    return invoke('plugin:tray|set_title', {\n      rid: this.rid,\n      title\n    });\n  }\n  /** Show or hide this tray icon. */\n  async setVisible(visible) {\n    return invoke('plugin:tray|set_visible', {\n      rid: this.rid,\n      visible\n    });\n  }\n  /**\n   * Sets the tray icon temp dir path. **Linux only**.\n   *\n   * On Linux, we need to write the icon to the disk and usually it will\n   * be `$XDG_RUNTIME_DIR/tray-icon` or `$TEMP/tray-icon`.\n   */\n  async setTempDirPath(path) {\n    return invoke('plugin:tray|set_temp_dir_path', {\n      rid: this.rid,\n      path\n    });\n  }\n  /** Sets the current icon as a [template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc). **macOS only** */\n  async setIconAsTemplate(asTemplate) {\n    return invoke('plugin:tray|set_icon_as_template', {\n      rid: this.rid,\n      asTemplate\n    });\n  }\n  /**\n   *  Disable or enable showing the tray menu on left click.\n   *\n   * #### Platform-specific:\n   *\n   * - **Linux**: Unsupported.\n   *\n   * @deprecated use {@linkcode TrayIcon.setShowMenuOnLeftClick} instead.\n   */\n  async setMenuOnLeftClick(onLeft) {\n    return invoke('plugin:tray|set_show_menu_on_left_click', {\n      rid: this.rid,\n      onLeft\n    });\n  }\n  /**\n   *  Disable or enable showing the tray menu on left click.\n   *\n   * #### Platform-specific:\n   *\n   * - **Linux**: Unsupported.\n   *\n   * @since 2.2.0\n   */\n  async setShowMenuOnLeftClick(onLeft) {\n    return invoke('plugin:tray|set_show_menu_on_left_click', {\n      rid: this.rid,\n      onLeft\n    });\n  }\n}\nfunction mapEvent(e) {\n  const out = e;\n  out.position = new PhysicalPosition(e.position);\n  out.rect.position = new PhysicalPosition(e.rect.position);\n  out.rect.size = new PhysicalSize(e.rect.size);\n  return out;\n}\nexport { TrayIcon };","map":{"version":3,"names":["Resource","invoke","Channel","transformImage","PhysicalPosition","PhysicalSize","TrayIcon","constructor","rid","id","getById","then","removeById","new","options","menu","kind","icon","handler","action","onmessage","e","mapEvent","_ref","setIcon","trayIcon","setMenu","setTooltip","tooltip","setTitle","title","setVisible","visible","setTempDirPath","path","setIconAsTemplate","asTemplate","setMenuOnLeftClick","onLeft","setShowMenuOnLeftClick","out","position","rect","size"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/tray.js"],"sourcesContent":["import { Resource, invoke, Channel } from './core.js';\nimport { transformImage } from './image.js';\nimport { PhysicalPosition, PhysicalSize } from './dpi.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Tray icon class and associated methods. This type constructor is private,\n * instead, you should use the static method {@linkcode TrayIcon.new}.\n *\n * #### Warning\n *\n * Unlike Rust, javascript does not have any way to run cleanup code\n * when an object is being removed by garbage collection, but this tray icon\n * will be cleaned up when the tauri app exists, however if you want to cleanup\n * this object early, you need to call {@linkcode TrayIcon.close}.\n *\n * @example\n * ```ts\n * import { TrayIcon } from '@tauri-apps/api/tray';\n * const tray = await TrayIcon.new({ tooltip: 'awesome tray tooltip' });\n * tray.set_tooltip('new tooltip');\n * ```\n */\nclass TrayIcon extends Resource {\n    constructor(rid, id) {\n        super(rid);\n        this.id = id;\n    }\n    /** Gets a tray icon using the provided id. */\n    static async getById(id) {\n        return invoke('plugin:tray|get_by_id', { id }).then((rid) => rid ? new TrayIcon(rid, id) : null);\n    }\n    /**\n     * Removes a tray icon using the provided id from tauri's internal state.\n     *\n     * Note that this may cause the tray icon to disappear\n     * if it wasn't cloned somewhere else or referenced by JS.\n     */\n    static async removeById(id) {\n        return invoke('plugin:tray|remove_by_id', { id });\n    }\n    /**\n     * Creates a new {@linkcode TrayIcon}\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** Sometimes the icon won't be visible unless a menu is set.\n     * Setting an empty {@linkcode Menu} is enough.\n     */\n    static async new(options) {\n        if (options === null || options === void 0 ? void 0 : options.menu) {\n            // @ts-expect-error we only need the rid and kind\n            options.menu = [options.menu.rid, options.menu.kind];\n        }\n        if (options === null || options === void 0 ? void 0 : options.icon) {\n            options.icon = transformImage(options.icon);\n        }\n        const handler = new Channel();\n        if (options === null || options === void 0 ? void 0 : options.action) {\n            const action = options.action;\n            handler.onmessage = (e) => action(mapEvent(e));\n            delete options.action;\n        }\n        return invoke('plugin:tray|new', {\n            options: options !== null && options !== void 0 ? options : {},\n            handler\n        }).then(([rid, id]) => new TrayIcon(rid, id));\n    }\n    /**\n     *  Sets a new tray icon. If `null` is provided, it will remove the icon.\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    async setIcon(icon) {\n        let trayIcon = null;\n        if (icon) {\n            trayIcon = transformImage(icon);\n        }\n        return invoke('plugin:tray|set_icon', { rid: this.rid, icon: trayIcon });\n    }\n    /**\n     * Sets a new tray menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: once a menu is set it cannot be removed so `null` has no effect\n     */\n    async setMenu(menu) {\n        if (menu) {\n            // @ts-expect-error we only need the rid and kind\n            menu = [menu.rid, menu.kind];\n        }\n        return invoke('plugin:tray|set_menu', { rid: this.rid, menu });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** Unsupported\n     */\n    async setTooltip(tooltip) {\n        return invoke('plugin:tray|set_tooltip', { rid: this.rid, tooltip });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** The title will not be shown unless there is an icon\n     * as well.  The title is useful for numerical and other frequently\n     * updated information.  In general, it shouldn't be shown unless a\n     * user requests it as it can take up a significant amount of space\n     * on the user's panel.  This may not be shown in all visualizations.\n     * - **Windows:** Unsupported\n     */\n    async setTitle(title) {\n        return invoke('plugin:tray|set_title', { rid: this.rid, title });\n    }\n    /** Show or hide this tray icon. */\n    async setVisible(visible) {\n        return invoke('plugin:tray|set_visible', { rid: this.rid, visible });\n    }\n    /**\n     * Sets the tray icon temp dir path. **Linux only**.\n     *\n     * On Linux, we need to write the icon to the disk and usually it will\n     * be `$XDG_RUNTIME_DIR/tray-icon` or `$TEMP/tray-icon`.\n     */\n    async setTempDirPath(path) {\n        return invoke('plugin:tray|set_temp_dir_path', { rid: this.rid, path });\n    }\n    /** Sets the current icon as a [template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc). **macOS only** */\n    async setIconAsTemplate(asTemplate) {\n        return invoke('plugin:tray|set_icon_as_template', {\n            rid: this.rid,\n            asTemplate\n        });\n    }\n    /**\n     *  Disable or enable showing the tray menu on left click.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: Unsupported.\n     *\n     * @deprecated use {@linkcode TrayIcon.setShowMenuOnLeftClick} instead.\n     */\n    async setMenuOnLeftClick(onLeft) {\n        return invoke('plugin:tray|set_show_menu_on_left_click', {\n            rid: this.rid,\n            onLeft\n        });\n    }\n    /**\n     *  Disable or enable showing the tray menu on left click.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: Unsupported.\n     *\n     * @since 2.2.0\n     */\n    async setShowMenuOnLeftClick(onLeft) {\n        return invoke('plugin:tray|set_show_menu_on_left_click', {\n            rid: this.rid,\n            onLeft\n        });\n    }\n}\nfunction mapEvent(e) {\n    const out = e;\n    out.position = new PhysicalPosition(e.position);\n    out.rect.position = new PhysicalPosition(e.rect.position);\n    out.rect.size = new PhysicalSize(e.rect.size);\n    return out;\n}\n\nexport { TrayIcon };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}