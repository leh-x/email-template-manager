{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lhaveman\\\\email-generator\\\\src\\\\components\\\\TemplateList\\\\TemplateList.tsx\",\n  _s = $RefreshSig$();\n// src/components/TemplateList/TemplateList.tsx\nimport React, { useEffect, useMemo, useState, useCallback } from 'react';\nimport { core } from '@tauri-apps/api';\nimport TemplateCard from '../TemplateCard/TemplateCard';\nimport styles from './TemplateList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeFavourites(input) {\n  // Accept string[] or legacy map<string, boolean>\n  const set = new Set();\n  if (Array.isArray(input)) {\n    input.forEach(s => typeof s === 'string' && set.add(s));\n  } else if (input && typeof input === 'object') {\n    for (const [k, v] of Object.entries(input)) {\n      if (v) set.add(k);\n    }\n  }\n  return set;\n}\nconst TemplateList = ({\n  selectedName,\n  onSelectTemplate\n}) => {\n  _s();\n  const [templates, setTemplates] = useState([]);\n  const [favourites, setFavourites] = useState(new Set());\n  const [search, setSearch] = useState('');\n  const [error, setError] = useState(null);\n\n  // Always fetch the latest file content on selection before notifying parent\n  const handleSelectByName = useCallback(async name => {\n    try {\n      var _meta$last_modified;\n      const content = await core.invoke('load_template', {\n        name\n      }); // calls your Rust command\n      const meta = templates.find(t => t.name === name);\n      onSelectTemplate({\n        name,\n        content,\n        last_modified: (_meta$last_modified = meta === null || meta === void 0 ? void 0 : meta.last_modified) !== null && _meta$last_modified !== void 0 ? _meta$last_modified : new Date().toISOString()\n      });\n    } catch (err) {\n      console.error('Failed to load template', err);\n      setError(prev => prev !== null && prev !== void 0 ? prev : 'Failed to load template');\n    }\n  }, [templates, onSelectTemplate]);\n  const toggleFavourite = useCallback(async filename => {\n    const next = new Set(favourites);\n    if (next.has(filename)) next.delete(filename);else next.add(filename);\n    setFavourites(next);\n\n    // Save ONLY an array => resolves the TODO\n    try {\n      await core.invoke('save_favourites', {\n        favourites: Array.from(next)\n      });\n    } catch (err) {\n      console.error('Failed to save favourites', err);\n    }\n  }, [favourites]);\n  const filteredSorted = useMemo(() => {\n    const q = search.trim().toLowerCase();\n    const list = q ? templates.filter(t => t.name.toLowerCase().includes(q) || t.content.toLowerCase().includes(q)) : templates.slice();\n    list.sort((a, b) => {\n      const af = favourites.has(a.name) ? 0 : 1;\n      const bf = favourites.has(b.name) ? 0 : 1;\n      if (af !== bf) return af - bf;\n      return a.name.localeCompare(b.name);\n    });\n    return list;\n  }, [templates, favourites, search]);\n\n  // Load templates + favourites on mount\n  useEffect(() => {\n    core.invoke('load_templates').then(setTemplates).catch(err => {\n      console.error(err);\n      setError('Failed to load templates');\n    });\n    core.invoke('load_favourites').then(data => setFavourites(normalizeFavourites(data))).catch(err => {\n      console.error(err);\n      setError(prev => prev !== null && prev !== void 0 ? prev : 'Failed to load favourites');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: styles.heading,\n        children: \"Templates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        placeholder: \"Search templates\\u2026\",\n        className: styles.search,\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.list,\n      children: filteredSorted.map(t => /*#__PURE__*/_jsxDEV(TemplateCard, {\n        name: t.name,\n        content: t.content,\n        last_modified: t.last_modified,\n        isFavourite: favourites.has(t.name),\n        selected: selectedName === t.name,\n        onSelect: handleSelectByName,\n        onToggleFavourite: toggleFavourite\n      }, t.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateList, \"XzXSXoiyIYsWz8FMrEqDtMXe4JI=\");\n_c = TemplateList;\nexport default TemplateList;\nvar _c;\n$RefreshReg$(_c, \"TemplateList\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","useCallback","core","TemplateCard","styles","jsxDEV","_jsxDEV","normalizeFavourites","input","set","Set","Array","isArray","forEach","s","add","k","v","Object","entries","TemplateList","selectedName","onSelectTemplate","_s","templates","setTemplates","favourites","setFavourites","search","setSearch","error","setError","handleSelectByName","name","_meta$last_modified","content","invoke","meta","find","t","last_modified","Date","toISOString","err","console","prev","toggleFavourite","filename","next","has","delete","from","filteredSorted","q","trim","toLowerCase","list","filter","includes","slice","sort","a","b","af","bf","localeCompare","then","catch","data","className","container","children","header","heading","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","isFavourite","selected","onSelect","onToggleFavourite","_c","$RefreshReg$"],"sources":["C:/Users/lhaveman/email-generator/src/components/TemplateList/TemplateList.tsx"],"sourcesContent":["// src/components/TemplateList/TemplateList.tsx\r\nimport React, { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport { core } from '@tauri-apps/api';\r\n\r\nimport TemplateCard from '../TemplateCard/TemplateCard';\r\nimport styles from './TemplateList.module.css';\r\n\r\nexport type TemplateFile = {\r\n  name: string;\r\n  content: string;\r\n  last_modified: string;\r\n};\r\n\r\ninterface TemplateListProps {\r\n  selectedName: string | null;\r\n  onSelectTemplate: (tpl: TemplateFile) => void;\r\n  refreshKey?: number;\r\n}\r\n\r\n\r\nfunction normalizeFavourites(input: unknown): Set<string> {\r\n  // Accept string[] or legacy map<string, boolean>\r\n  const set = new Set<string>();\r\n  if (Array.isArray(input)) {\r\n    input.forEach((s) => typeof s === 'string' && set.add(s));\r\n  } else if (input && typeof input === 'object') {\r\n    for (const [k, v] of Object.entries(input as Record<string, unknown>)) {\r\n      if (v) set.add(k);\r\n    }\r\n  }\r\n  return set;\r\n}\r\n\r\n\r\nconst TemplateList: React.FC<TemplateListProps> = ({ selectedName, onSelectTemplate }) => {\r\n  const [templates, setTemplates] = useState<TemplateFile[]>([]);\r\n  const [favourites, setFavourites] = useState<Set<string>>(new Set());\r\n  const [search, setSearch] = useState('');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Always fetch the latest file content on selection before notifying parent\r\n  const handleSelectByName = useCallback(async (name: string) => {\r\n    try {\r\n      const content = await core.invoke<string>('load_template', { name }); // calls your Rust command\r\n      const meta = templates.find(t => t.name === name);\r\n      onSelectTemplate({\r\n        name,\r\n        content,\r\n        last_modified: meta?.last_modified ?? new Date().toISOString(),\r\n      });\r\n    } catch (err) {\r\n      console.error('Failed to load template', err);\r\n      setError(prev => prev ?? 'Failed to load template');\r\n    }\r\n  }, [templates, onSelectTemplate]);\r\n\r\n  const toggleFavourite = useCallback(async (filename: string) => {\r\n    const next = new Set(favourites);\r\n    if (next.has(filename)) next.delete(filename);\r\n    else next.add(filename);\r\n    setFavourites(next);\r\n\r\n    // Save ONLY an array => resolves the TODO\r\n    try {\r\n      await core.invoke('save_favourites', { favourites: Array.from(next) });\r\n    } catch (err) {\r\n      console.error('Failed to save favourites', err);\r\n    }\r\n  }, [favourites]);\r\n\r\n  const filteredSorted = useMemo(() => {\r\n    const q = search.trim().toLowerCase();\r\n    const list = q\r\n      ? templates.filter(t =>\r\n          t.name.toLowerCase().includes(q) ||\r\n          t.content.toLowerCase().includes(q)\r\n        )\r\n      : templates.slice();\r\n\r\n    list.sort((a, b) => {\r\n      const af = favourites.has(a.name) ? 0 : 1;\r\n      const bf = favourites.has(b.name) ? 0 : 1;\r\n      if (af !== bf) return af - bf;\r\n      return a.name.localeCompare(b.name);\r\n    });\r\n    return list;\r\n  }, [templates, favourites, search]);\r\n\r\n    // Load templates + favourites on mount\r\n  useEffect(() => {\r\n    core.invoke<TemplateFile[]>('load_templates')\r\n      .then(setTemplates)\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError('Failed to load templates');\r\n      });\r\n\r\n    core.invoke<unknown>('load_favourites')\r\n      .then((data) => setFavourites(normalizeFavourites(data)))\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError((prev) => prev ?? 'Failed to load favourites');\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        <h4 className={styles.heading}>Templates</h4>\r\n        <input\r\n          type=\"search\"\r\n          placeholder=\"Search templates…\"\r\n          className={styles.search}\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      {error && <div className={styles.error}>{error}</div>}\r\n\r\n      <div className={styles.list}>\r\n        {filteredSorted.map((t) => (\r\n          <TemplateCard\r\n            key={t.name}\r\n            name={t.name}\r\n            content={t.content}\r\n            last_modified={t.last_modified}\r\n            isFavourite={favourites.has(t.name)}\r\n            selected={selectedName === t.name}\r\n            onSelect={handleSelectByName}\r\n            onToggleFavourite={toggleFavourite}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemplateList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}