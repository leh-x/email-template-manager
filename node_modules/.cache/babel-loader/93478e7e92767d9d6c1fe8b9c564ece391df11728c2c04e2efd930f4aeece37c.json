{"ast":null,"code":"import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { getCurrentWindow, Window } from './window.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create webviews, communicate with other webviews and manipulate the current webview.\n *\n * #### Webview events\n *\n * Events can be listened to using {@link Webview.listen}:\n * ```typescript\n * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n * getCurrentWebview().listen(\"my-webview-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Get an instance of `Webview` for the current webview.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebview() {\n  return new Webview(getCurrentWindow(), window.__TAURI_INTERNALS__.metadata.currentWebview.label, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  });\n}\n/**\n * Gets a list of instances of `Webview` for all available webviews.\n *\n * @since 2.0.0\n */\nasync function getAllWebviews() {\n  return invoke('plugin:webview|get_all_webviews').then(webviews => webviews.map(w => new Webview(new Window(w.windowLabel, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  }), w.label, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new webview or get a handle to an existing one.\n *\n * Webviews are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n * import { Webview } from \"@tauri-apps/api/webview\"\n *\n * const appWindow = new Window('uniqueLabel');\n *\n * appWindow.once('tauri://created', async function () {\n *   // `new Webview` Should be called after the window is successfully created,\n *   // or webview may not be attached to the window since window is not created yet.\n *\n *   // loading embedded asset:\n *   const webview = new Webview(appWindow, 'theUniqueLabel', {\n *     url: 'path/to/page.html',\n *\n *     // create a webview with specific logical position and size\n *     x: 0,\n *     y: 0,\n *     width: 800,\n *     height: 600,\n *   });\n *   // alternatively, load a remote URL:\n *   const webview = new Webview(appWindow, 'theUniqueLabel', {\n *     url: 'https://github.com/tauri-apps/tauri',\n *\n *     // create a webview with specific logical position and size\n *     x: 0,\n *     y: 0,\n *     width: 800,\n *     height: 600,\n *   });\n *\n *   webview.once('tauri://created', function () {\n *     // webview successfully created\n *   });\n *   webview.once('tauri://error', function (e) {\n *     // an error happened creating the webview\n *   });\n *\n *\n *   // emit an event to the backend\n *   await webview.emit(\"some-event\", \"data\");\n *   // listen to an event from the backend\n *   const unlisten = await webview.listen(\"event-name\", e => { });\n *   unlisten();\n * });\n * ```\n *\n * @since 2.0.0\n */\nclass Webview {\n  /**\n   * Creates a new Webview.\n   * @example\n   * ```typescript\n   * import { Window } from '@tauri-apps/api/window'\n   * import { Webview } from '@tauri-apps/api/webview'\n   * const appWindow = new Window('my-label')\n   *\n   * appWindow.once('tauri://created', async function() {\n   *   const webview = new Webview(appWindow, 'my-label', {\n   *     url: 'https://github.com/tauri-apps/tauri',\n   *\n   *     // create a webview with specific logical position and size\n   *     x: 0,\n   *     y: 0,\n   *     width: 800,\n   *     height: 600,\n   *   });\n   *\n   *   webview.once('tauri://created', function () {\n   *     // webview successfully created\n   *   });\n   *   webview.once('tauri://error', function (e) {\n   *     // an error happened creating the webview\n   *   });\n   * });\n   * ```\n   *\n   * @param window the window to add this webview to.\n   * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n   * @returns The {@link Webview} instance to communicate with the webview.\n   */\n  constructor(window, label, options) {\n    this.window = window;\n    this.label = label;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.listeners = Object.create(null);\n    // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n    if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n      invoke('plugin:webview|create_webview', {\n        windowLabel: window.label,\n        options: {\n          ...options,\n          label\n        }\n      }).then(async () => this.emit('tauri://created')).catch(async e => this.emit('tauri://error', e));\n    }\n  }\n  /**\n   * Gets the Webview for the webview associated with the given label.\n   * @example\n   * ```typescript\n   * import { Webview } from '@tauri-apps/api/webview';\n   * const mainWebview = Webview.getByLabel('main');\n   * ```\n   *\n   * @param label The webview label.\n   * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n   */\n  static async getByLabel(label) {\n    var _a;\n    return (_a = (await getAllWebviews()).find(w => w.label === label)) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * Get an instance of `Webview` for the current webview.\n   */\n  static getCurrent() {\n    return getCurrentWebview();\n  }\n  /**\n   * Gets a list of instances of `Webview` for all available webviews.\n   */\n  static async getAll() {\n    return getAllWebviews();\n  }\n  /**\n   * Listen to an emitted event on this webview.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * const unlisten = await getCurrentWebview().listen<string>('state-changed', (event) => {\n   *   console.log(`Got error: ${payload}`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async listen(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return () => {\n        // eslint-disable-next-line security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      };\n    }\n    return listen(event, handler, {\n      target: {\n        kind: 'Webview',\n        label: this.label\n      }\n    });\n  }\n  /**\n   * Listen to an emitted event on this webview only once.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * const unlisten = await getCurrent().once<null>('initialized', (event) => {\n   *   console.log(`Webview initialized!`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async once(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return () => {\n        // eslint-disable-next-line security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      };\n    }\n    return once(event, handler, {\n      target: {\n        kind: 'Webview',\n        label: this.label\n      }\n    });\n  }\n  /**\n   * Emits an event to all {@link EventTarget|targets}.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().emit('webview-loaded', { loggedIn: true, token: 'authToken' });\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param payload Event payload.\n   */\n  async emit(event, payload) {\n    if (localTauriEvents.includes(event)) {\n      // eslint-disable-next-line\n      for (const handler of this.listeners[event] || []) {\n        handler({\n          event,\n          id: -1,\n          payload\n        });\n      }\n      return;\n    }\n    return emit(event, payload);\n  }\n  /**\n   * Emits an event to all {@link EventTarget|targets} matching the given target.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().emitTo('main', 'webview-loaded', { loggedIn: true, token: 'authToken' });\n   * ```\n   *\n   * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param payload Event payload.\n   */\n  async emitTo(target, event, payload) {\n    if (localTauriEvents.includes(event)) {\n      // eslint-disable-next-line\n      for (const handler of this.listeners[event] || []) {\n        handler({\n          event,\n          id: -1,\n          payload\n        });\n      }\n      return;\n    }\n    return emitTo(target, event, payload);\n  }\n  /** @ignore */\n  _handleTauriEvent(event, handler) {\n    if (localTauriEvents.includes(event)) {\n      if (!(event in this.listeners)) {\n        // eslint-disable-next-line security/detect-object-injection\n        this.listeners[event] = [handler];\n      } else {\n        // eslint-disable-next-line security/detect-object-injection\n        this.listeners[event].push(handler);\n      }\n      return true;\n    }\n    return false;\n  }\n  // Getters\n  /**\n   * The position of the top-left hand corner of the webview's client area relative to the top-left hand corner of the desktop.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * const position = await getCurrentWebview().position();\n   * ```\n   *\n   * @returns The webview's position.\n   */\n  async position() {\n    return invoke('plugin:webview|webview_position', {\n      label: this.label\n    }).then(p => new PhysicalPosition(p));\n  }\n  /**\n   * The physical size of the webview's client area.\n   * The client area is the content of the webview, excluding the title bar and borders.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * const size = await getCurrentWebview().size();\n   * ```\n   *\n   * @returns The webview's size.\n   */\n  async size() {\n    return invoke('plugin:webview|webview_size', {\n      label: this.label\n    }).then(s => new PhysicalSize(s));\n  }\n  // Setters\n  /**\n   * Closes the webview.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().close();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async close() {\n    return invoke('plugin:webview|webview_close', {\n      label: this.label\n    });\n  }\n  /**\n   * Resizes the webview.\n   * @example\n   * ```typescript\n   * import { getCurrent, LogicalSize } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().setSize(new LogicalSize(600, 500));\n   * ```\n   *\n   * @param size The logical or physical size.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setSize(size) {\n    return invoke('plugin:webview|set_webview_size', {\n      label: this.label,\n      value: size instanceof Size ? size : new Size(size)\n    });\n  }\n  /**\n   * Sets the webview position.\n   * @example\n   * ```typescript\n   * import { getCurrent, LogicalPosition } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().setPosition(new LogicalPosition(600, 500));\n   * ```\n   *\n   * @param position The new position, in logical or physical pixels.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setPosition(position) {\n    return invoke('plugin:webview|set_webview_position', {\n      label: this.label,\n      value: position instanceof Position ? position : new Position(position)\n    });\n  }\n  /**\n   * Bring the webview to front and focus.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().setFocus();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setFocus() {\n    return invoke('plugin:webview|set_webview_focus', {\n      label: this.label\n    });\n  }\n  /**\n   * Sets whether the webview should automatically grow and shrink its size and position when the parent window resizes.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().setAutoResize(true);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setAutoResize(autoResize) {\n    return invoke('plugin:webview|set_webview_auto_resize', {\n      label: this.label,\n      value: autoResize\n    });\n  }\n  /**\n   * Hide the webview.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().hide();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async hide() {\n    return invoke('plugin:webview|webview_hide', {\n      label: this.label\n    });\n  }\n  /**\n   * Show the webview.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().show();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async show() {\n    return invoke('plugin:webview|webview_show', {\n      label: this.label\n    });\n  }\n  /**\n   * Set webview zoom level.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().setZoom(1.5);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setZoom(scaleFactor) {\n    return invoke('plugin:webview|set_webview_zoom', {\n      label: this.label,\n      value: scaleFactor\n    });\n  }\n  /**\n   * Moves this webview to the given label.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().reparent('other-window');\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async reparent(window) {\n    return invoke('plugin:webview|reparent', {\n      label: this.label,\n      window: typeof window === 'string' ? window : window.label\n    });\n  }\n  /**\n   * Clears all browsing data for this webview.\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from '@tauri-apps/api/webview';\n   * await getCurrentWebview().clearAllBrowsingData();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async clearAllBrowsingData() {\n    return invoke('plugin:webview|clear_all_browsing_data');\n  }\n  /**\n   * Specify the webview background color.\n   *\n   * #### Platfrom-specific:\n   *\n   * - **macOS / iOS**: Not implemented.\n   * - **Windows**:\n   *   - On Windows 7, transparency is not supported and the alpha value will be ignored.\n   *   - On Windows higher than 7: translucent colors are not supported so any alpha value other than `0` will be replaced by `255`\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   *\n   * @since 2.1.0\n   */\n  async setBackgroundColor(color) {\n    return invoke('plugin:webview|set_webview_background_color', {\n      color\n    });\n  }\n  // Listeners\n  /**\n   * Listen to a file drop event.\n   * The listener is triggered when the user hovers the selected files on the webview,\n   * drops the files or cancels the operation.\n   *\n   * @example\n   * ```typescript\n   * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n   * const unlisten = await getCurrentWebview().onDragDropEvent((event) => {\n   *  if (event.payload.type === 'over') {\n   *    console.log('User hovering', event.payload.position);\n   *  } else if (event.payload.type === 'drop') {\n   *    console.log('User dropped', event.payload.paths);\n   *  } else {\n   *    console.log('File drop cancelled');\n   *  }\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * When the debugger panel is open, the drop position of this event may be inaccurate due to a known limitation.\n   * To retrieve the correct drop position, please detach the debugger.\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   */\n  async onDragDropEvent(handler) {\n    const unlistenDragEnter = await this.listen(TauriEvent.DRAG_ENTER, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'enter',\n          paths: event.payload.paths,\n          position: new PhysicalPosition(event.payload.position)\n        }\n      });\n    });\n    const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'over',\n          position: new PhysicalPosition(event.payload.position)\n        }\n      });\n    });\n    const unlistenDragDrop = await this.listen(TauriEvent.DRAG_DROP, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'drop',\n          paths: event.payload.paths,\n          position: new PhysicalPosition(event.payload.position)\n        }\n      });\n    });\n    const unlistenDragLeave = await this.listen(TauriEvent.DRAG_LEAVE, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'leave'\n        }\n      });\n    });\n    return () => {\n      unlistenDragEnter();\n      unlistenDragDrop();\n      unlistenDragOver();\n      unlistenDragLeave();\n    };\n  }\n}\nexport { Webview, getAllWebviews, getCurrentWebview };","map":{"version":3,"names":["PhysicalPosition","PhysicalSize","Size","Position","listen","once","emit","emitTo","TauriEvent","invoke","getCurrentWindow","Window","getCurrentWebview","Webview","window","__TAURI_INTERNALS__","metadata","currentWebview","label","skip","getAllWebviews","then","webviews","map","w","windowLabel","localTauriEvents","constructor","options","listeners","Object","create","catch","e","getByLabel","_a","find","getCurrent","getAll","event","handler","_handleTauriEvent","splice","indexOf","target","kind","payload","includes","id","push","position","p","size","s","close","setSize","value","setPosition","setFocus","setAutoResize","autoResize","hide","show","setZoom","scaleFactor","reparent","clearAllBrowsingData","setBackgroundColor","color","onDragDropEvent","unlistenDragEnter","DRAG_ENTER","type","paths","unlistenDragOver","DRAG_OVER","unlistenDragDrop","DRAG_DROP","unlistenDragLeave","DRAG_LEAVE"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/webview.js"],"sourcesContent":["import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { getCurrentWindow, Window } from './window.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create webviews, communicate with other webviews and manipulate the current webview.\n *\n * #### Webview events\n *\n * Events can be listened to using {@link Webview.listen}:\n * ```typescript\n * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n * getCurrentWebview().listen(\"my-webview-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Get an instance of `Webview` for the current webview.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebview() {\n    return new Webview(getCurrentWindow(), window.__TAURI_INTERNALS__.metadata.currentWebview.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Webview` for all available webviews.\n *\n * @since 2.0.0\n */\nasync function getAllWebviews() {\n    return invoke('plugin:webview|get_all_webviews').then((webviews) => webviews.map((w) => new Webview(new Window(w.windowLabel, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    }), w.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new webview or get a handle to an existing one.\n *\n * Webviews are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n * import { Webview } from \"@tauri-apps/api/webview\"\n *\n * const appWindow = new Window('uniqueLabel');\n *\n * appWindow.once('tauri://created', async function () {\n *   // `new Webview` Should be called after the window is successfully created,\n *   // or webview may not be attached to the window since window is not created yet.\n *\n *   // loading embedded asset:\n *   const webview = new Webview(appWindow, 'theUniqueLabel', {\n *     url: 'path/to/page.html',\n *\n *     // create a webview with specific logical position and size\n *     x: 0,\n *     y: 0,\n *     width: 800,\n *     height: 600,\n *   });\n *   // alternatively, load a remote URL:\n *   const webview = new Webview(appWindow, 'theUniqueLabel', {\n *     url: 'https://github.com/tauri-apps/tauri',\n *\n *     // create a webview with specific logical position and size\n *     x: 0,\n *     y: 0,\n *     width: 800,\n *     height: 600,\n *   });\n *\n *   webview.once('tauri://created', function () {\n *     // webview successfully created\n *   });\n *   webview.once('tauri://error', function (e) {\n *     // an error happened creating the webview\n *   });\n *\n *\n *   // emit an event to the backend\n *   await webview.emit(\"some-event\", \"data\");\n *   // listen to an event from the backend\n *   const unlisten = await webview.listen(\"event-name\", e => { });\n *   unlisten();\n * });\n * ```\n *\n * @since 2.0.0\n */\nclass Webview {\n    /**\n     * Creates a new Webview.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window'\n     * import { Webview } from '@tauri-apps/api/webview'\n     * const appWindow = new Window('my-label')\n     *\n     * appWindow.once('tauri://created', async function() {\n     *   const webview = new Webview(appWindow, 'my-label', {\n     *     url: 'https://github.com/tauri-apps/tauri',\n     *\n     *     // create a webview with specific logical position and size\n     *     x: 0,\n     *     y: 0,\n     *     width: 800,\n     *     height: 600,\n     *   });\n     *\n     *   webview.once('tauri://created', function () {\n     *     // webview successfully created\n     *   });\n     *   webview.once('tauri://error', function (e) {\n     *     // an error happened creating the webview\n     *   });\n     * });\n     * ```\n     *\n     * @param window the window to add this webview to.\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Webview} instance to communicate with the webview.\n     */\n    constructor(window, label, options) {\n        this.window = window;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:webview|create_webview', {\n                windowLabel: window.label,\n                options: {\n                    ...options,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webview';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWebviews()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */\n    static getCurrent() {\n        return getCurrentWebview();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */\n    static async getAll() {\n        return getAllWebviews();\n    }\n    /**\n     * Listen to an emitted event on this webview.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrentWebview().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Webview', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Webview', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().emit('webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().emitTo('main', 'webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line security/detect-object-injection\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line security/detect-object-injection\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The position of the top-left hand corner of the webview's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const position = await getCurrentWebview().position();\n     * ```\n     *\n     * @returns The webview's position.\n     */\n    async position() {\n        return invoke('plugin:webview|webview_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the webview's client area.\n     * The client area is the content of the webview, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const size = await getCurrentWebview().size();\n     * ```\n     *\n     * @returns The webview's size.\n     */\n    async size() {\n        return invoke('plugin:webview|webview_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    // Setters\n    /**\n     * Closes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:webview|webview_close', {\n            label: this.label\n        });\n    }\n    /**\n     * Resizes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:webview|set_webview_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the webview position.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:webview|set_webview_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Bring the webview to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:webview|set_webview_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets whether the webview should automatically grow and shrink its size and position when the parent window resizes.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setAutoResize(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAutoResize(autoResize) {\n        return invoke('plugin:webview|set_webview_auto_resize', {\n            label: this.label,\n            value: autoResize\n        });\n    }\n    /**\n     * Hide the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:webview|webview_hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Show the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:webview|webview_show', {\n            label: this.label\n        });\n    }\n    /**\n     * Set webview zoom level.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setZoom(1.5);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setZoom(scaleFactor) {\n        return invoke('plugin:webview|set_webview_zoom', {\n            label: this.label,\n            value: scaleFactor\n        });\n    }\n    /**\n     * Moves this webview to the given label.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().reparent('other-window');\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async reparent(window) {\n        return invoke('plugin:webview|reparent', {\n            label: this.label,\n            window: typeof window === 'string' ? window : window.label\n        });\n    }\n    /**\n     * Clears all browsing data for this webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().clearAllBrowsingData();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async clearAllBrowsingData() {\n        return invoke('plugin:webview|clear_all_browsing_data');\n    }\n    /**\n     * Specify the webview background color.\n     *\n     * #### Platfrom-specific:\n     *\n     * - **macOS / iOS**: Not implemented.\n     * - **Windows**:\n     *   - On Windows 7, transparency is not supported and the alpha value will be ignored.\n     *   - On Windows higher than 7: translucent colors are not supported so any alpha value other than `0` will be replaced by `255`\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:webview|set_webview_background_color', { color });\n    }\n    // Listeners\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWebview().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * When the debugger panel is open, the drop position of this event may be inaccurate due to a known limitation.\n     * To retrieve the correct drop position, please detach the debugger.\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDragEnter = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragLeave = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDragEnter();\n            unlistenDragDrop();\n            unlistenDragOver();\n            unlistenDragLeave();\n        };\n    }\n}\n\nexport { Webview, getAllWebviews, getCurrentWebview };\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,YAAY,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,UAAU;AACzE,SAASC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,QAAQ,YAAY;AACnE,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,gBAAgB,EAAEC,MAAM,QAAQ,aAAa;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAAA,EAAG;EACzB,OAAO,IAAIC,OAAO,CAACH,gBAAgB,CAAC,CAAC,EAAEI,MAAM,CAACC,mBAAmB,CAACC,QAAQ,CAACC,cAAc,CAACC,KAAK,EAAE;IAC7F;IACAC,IAAI,EAAE;EACV,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,cAAcA,CAAA,EAAG;EAC5B,OAAOX,MAAM,CAAC,iCAAiC,CAAC,CAACY,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,GAAG,CAAEC,CAAC,IAAK,IAAIX,OAAO,CAAC,IAAIF,MAAM,CAACa,CAAC,CAACC,WAAW,EAAE;IAC1H;IACAN,IAAI,EAAE;EACV,CAAC,CAAC,EAAEK,CAAC,CAACN,KAAK,EAAE;IACT;IACAC,IAAI,EAAE;EACV,CAAC,CAAC,CAAC,CAAC;AACR;AACA;AACA;AACA,MAAMO,gBAAgB,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMb,OAAO,CAAC;EACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}