{"ast":null,"code":"import { SERIALIZE_TO_IPC_FN } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n * Logical pixels are scaled according to the window's DPI scale.\n * Most browser APIs (i.e. `MouseEvent`'s `clientX`) will return logical pixels.\n *\n * For logical-pixel-based position, see {@linkcode LogicalPosition}.\n *\n * @since 2.0.0\n */\nclass LogicalSize {\n  constructor(...args) {\n    this.type = 'Logical';\n    if (args.length === 1) {\n      if ('Logical' in args[0]) {\n        this.width = args[0].Logical.width;\n        this.height = args[0].Logical.height;\n      } else {\n        this.width = args[0].width;\n        this.height = args[0].height;\n      }\n    } else {\n      this.width = args[0];\n      this.height = args[1];\n    }\n  }\n  /**\n   * Converts the logical size to a physical one.\n   * @example\n   * ```typescript\n   * import { LogicalSize } from '@tauri-apps/api/dpi';\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   *\n   * const appWindow = getCurrentWindow();\n   * const factor = await appWindow.scaleFactor();\n   * const size = new LogicalSize(400, 500);\n   * const physical = size.toPhysical(factor);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  toPhysical(scaleFactor) {\n    return new PhysicalSize(this.width * scaleFactor, this.height * scaleFactor);\n  }\n  [SERIALIZE_TO_IPC_FN]() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  }\n  toJSON() {\n    // eslint-disable-next-line security/detect-object-injection\n    return this[SERIALIZE_TO_IPC_FN]();\n  }\n}\n/**\n * A size represented in physical pixels.\n *\n * Physical pixels represent actual screen pixels, and are DPI-independent.\n * For high-DPI windows, this means that any point in the window on the screen\n * will have a different position in logical pixels (@linkcode LogicalSize).\n *\n * For physical-pixel-based position, see {@linkcode PhysicalPosition}.\n *\n * @since 2.0.0\n */\nclass PhysicalSize {\n  constructor(...args) {\n    this.type = 'Physical';\n    if (args.length === 1) {\n      if ('Physical' in args[0]) {\n        this.width = args[0].Physical.width;\n        this.height = args[0].Physical.height;\n      } else {\n        this.width = args[0].width;\n        this.height = args[0].height;\n      }\n    } else {\n      this.width = args[0];\n      this.height = args[1];\n    }\n  }\n  /**\n   * Converts the physical size to a logical one.\n   * @example\n   * ```typescript\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   * const appWindow = getCurrentWindow();\n   * const factor = await appWindow.scaleFactor();\n   * const size = await appWindow.innerSize(); // PhysicalSize\n   * const logical = size.toLogical(factor);\n   * ```\n   */\n  toLogical(scaleFactor) {\n    return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n  }\n  [SERIALIZE_TO_IPC_FN]() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  }\n  toJSON() {\n    // eslint-disable-next-line security/detect-object-injection\n    return this[SERIALIZE_TO_IPC_FN]();\n  }\n}\n/**\n * A size represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Size` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Size`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = size instanceof LogicalSize\n *   ? { Logical: { width: size.width, height: size.height } }\n *   : { Physical: { width: size.width, height: size.height } }\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * You can just use {@linkcode Size}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize, Size } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = new Size(size);\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * @since 2.1.0\n */\nclass Size {\n  constructor(size) {\n    this.size = size;\n  }\n  toLogical(scaleFactor) {\n    return this.size instanceof LogicalSize ? this.size : this.size.toLogical(scaleFactor);\n  }\n  toPhysical(scaleFactor) {\n    return this.size instanceof PhysicalSize ? this.size : this.size.toPhysical(scaleFactor);\n  }\n  [SERIALIZE_TO_IPC_FN]() {\n    return {\n      [`${this.size.type}`]: {\n        width: this.size.width,\n        height: this.size.height\n      }\n    };\n  }\n  toJSON() {\n    // eslint-disable-next-line security/detect-object-injection\n    return this[SERIALIZE_TO_IPC_FN]();\n  }\n}\n/**\n * A position represented in logical pixels.\n * For an explanation of what logical pixels are, see description of {@linkcode LogicalSize}.\n *\n * @since 2.0.0\n */\nclass LogicalPosition {\n  constructor(...args) {\n    this.type = 'Logical';\n    if (args.length === 1) {\n      if ('Logical' in args[0]) {\n        this.x = args[0].Logical.x;\n        this.y = args[0].Logical.y;\n      } else {\n        this.x = args[0].x;\n        this.y = args[0].y;\n      }\n    } else {\n      this.x = args[0];\n      this.y = args[1];\n    }\n  }\n  /**\n   * Converts the logical position to a physical one.\n   * @example\n   * ```typescript\n   * import { LogicalPosition } from '@tauri-apps/api/dpi';\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   *\n   * const appWindow = getCurrentWindow();\n   * const factor = await appWindow.scaleFactor();\n   * const position = new LogicalPosition(400, 500);\n   * const physical = position.toPhysical(factor);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  toPhysical(scaleFactor) {\n    return new PhysicalPosition(this.x * scaleFactor, this.y * scaleFactor);\n  }\n  [SERIALIZE_TO_IPC_FN]() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n  toJSON() {\n    // eslint-disable-next-line security/detect-object-injection\n    return this[SERIALIZE_TO_IPC_FN]();\n  }\n}\n/**\n * A position represented in physical pixels.\n *\n * For an explanation of what physical pixels are, see description of {@linkcode PhysicalSize}.\n *\n * @since 2.0.0\n */\nclass PhysicalPosition {\n  constructor(...args) {\n    this.type = 'Physical';\n    if (args.length === 1) {\n      if ('Physical' in args[0]) {\n        this.x = args[0].Physical.x;\n        this.y = args[0].Physical.y;\n      } else {\n        this.x = args[0].x;\n        this.y = args[0].y;\n      }\n    } else {\n      this.x = args[0];\n      this.y = args[1];\n    }\n  }\n  /**\n   * Converts the physical position to a logical one.\n   * @example\n   * ```typescript\n   * import { PhysicalPosition } from '@tauri-apps/api/dpi';\n   * import { getCurrentWindow } from '@tauri-apps/api/window';\n   *\n   * const appWindow = getCurrentWindow();\n   * const factor = await appWindow.scaleFactor();\n   * const position = new PhysicalPosition(400, 500);\n   * const physical = position.toLogical(factor);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  toLogical(scaleFactor) {\n    return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n  }\n  [SERIALIZE_TO_IPC_FN]() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n  toJSON() {\n    // eslint-disable-next-line security/detect-object-injection\n    return this[SERIALIZE_TO_IPC_FN]();\n  }\n}\n/**\n * A position represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Position` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Position`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = position instanceof LogicalPosition\n *   ? { Logical: { x: position.x, y: position.y } }\n *   : { Physical: { x: position.x, y: position.y } }\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * You can just use {@linkcode Position}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition, Position } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = new Position(position);\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * @since 2.1.0\n */\nclass Position {\n  constructor(position) {\n    this.position = position;\n  }\n  toLogical(scaleFactor) {\n    return this.position instanceof LogicalPosition ? this.position : this.position.toLogical(scaleFactor);\n  }\n  toPhysical(scaleFactor) {\n    return this.position instanceof PhysicalPosition ? this.position : this.position.toPhysical(scaleFactor);\n  }\n  [SERIALIZE_TO_IPC_FN]() {\n    return {\n      [`${this.position.type}`]: {\n        x: this.position.x,\n        y: this.position.y\n      }\n    };\n  }\n  toJSON() {\n    // eslint-disable-next-line security/detect-object-injection\n    return this[SERIALIZE_TO_IPC_FN]();\n  }\n}\nexport { LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, Position, Size };","map":{"version":3,"names":["SERIALIZE_TO_IPC_FN","LogicalSize","constructor","args","type","length","width","Logical","height","toPhysical","scaleFactor","PhysicalSize","toJSON","Physical","toLogical","Size","size","LogicalPosition","x","y","PhysicalPosition","Position","position"],"sources":["C:/Users/lhaveman/email-generator/node_modules/@tauri-apps/api/dpi.js"],"sourcesContent":["import { SERIALIZE_TO_IPC_FN } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n * Logical pixels are scaled according to the window's DPI scale.\n * Most browser APIs (i.e. `MouseEvent`'s `clientX`) will return logical pixels.\n *\n * For logical-pixel-based position, see {@linkcode LogicalPosition}.\n *\n * @since 2.0.0\n */\nclass LogicalSize {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.width = args[0].Logical.width;\n                this.height = args[0].Logical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the logical size to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalSize } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = new LogicalSize(400, 500);\n     * const physical = size.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalSize(this.width * scaleFactor, this.height * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * Physical pixels represent actual screen pixels, and are DPI-independent.\n * For high-DPI windows, this means that any point in the window on the screen\n * will have a different position in logical pixels (@linkcode LogicalSize).\n *\n * For physical-pixel-based position, see {@linkcode PhysicalPosition}.\n *\n * @since 2.0.0\n */\nclass PhysicalSize {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.width = args[0].Physical.width;\n                this.height = args[0].Physical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize(); // PhysicalSize\n     * const logical = size.toLogical(factor);\n     * ```\n     */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Size` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Size`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = size instanceof LogicalSize\n *   ? { Logical: { width: size.width, height: size.height } }\n *   : { Physical: { width: size.width, height: size.height } }\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * You can just use {@linkcode Size}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize, Size } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = new Size(size);\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * @since 2.1.0\n */\nclass Size {\n    constructor(size) {\n        this.size = size;\n    }\n    toLogical(scaleFactor) {\n        return this.size instanceof LogicalSize\n            ? this.size\n            : this.size.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.size instanceof PhysicalSize\n            ? this.size\n            : this.size.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.size.type}`]: {\n                width: this.size.width,\n                height: this.size.height\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented in logical pixels.\n * For an explanation of what logical pixels are, see description of {@linkcode LogicalSize}.\n *\n * @since 2.0.0\n */\nclass LogicalPosition {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.x = args[0].Logical.x;\n                this.y = args[0].Logical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the logical position to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new LogicalPosition(400, 500);\n     * const physical = position.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalPosition(this.x * scaleFactor, this.y * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented in physical pixels.\n *\n * For an explanation of what physical pixels are, see description of {@linkcode PhysicalSize}.\n *\n * @since 2.0.0\n */\nclass PhysicalPosition {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.x = args[0].Physical.x;\n                this.y = args[0].Physical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { PhysicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new PhysicalPosition(400, 500);\n     * const physical = position.toLogical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Position` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Position`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = position instanceof LogicalPosition\n *   ? { Logical: { x: position.x, y: position.y } }\n *   : { Physical: { x: position.x, y: position.y } }\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * You can just use {@linkcode Position}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition, Position } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = new Position(position);\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * @since 2.1.0\n */\nclass Position {\n    constructor(position) {\n        this.position = position;\n    }\n    toLogical(scaleFactor) {\n        return this.position instanceof LogicalPosition\n            ? this.position\n            : this.position.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.position instanceof PhysicalPosition\n            ? this.position\n            : this.position.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.position.type}`]: {\n                x: this.position.x,\n                y: this.position.y\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n\nexport { LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, Position, Size };\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,WAAW;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EACdC,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACjB,IAAI,CAACC,IAAI,GAAG,SAAS;IACrB,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACnB,IAAI,SAAS,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;QACtB,IAAI,CAACG,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAACD,KAAK;QAClC,IAAI,CAACE,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAACC,MAAM;MACxC,CAAC,MACI;QACD,IAAI,CAACF,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACG,KAAK;QAC1B,IAAI,CAACE,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM;MAChC;IACJ,CAAC,MACI;MACD,IAAI,CAACF,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;MACpB,IAAI,CAACK,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC;IACzB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,UAAUA,CAACC,WAAW,EAAE;IACpB,OAAO,IAAIC,YAAY,CAAC,IAAI,CAACL,KAAK,GAAGI,WAAW,EAAE,IAAI,CAACF,MAAM,GAAGE,WAAW,CAAC;EAChF;EACA,CAACV,mBAAmB,IAAI;IACpB,OAAO;MACHM,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBE,MAAM,EAAE,IAAI,CAACA;IACjB,CAAC;EACL;EACAI,MAAMA,CAAA,EAAG;IACL;IACA,OAAO,IAAI,CAACZ,mBAAmB,CAAC,CAAC,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,YAAY,CAAC;EACfT,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACjB,IAAI,CAACC,IAAI,GAAG,UAAU;IACtB,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACnB,IAAI,UAAU,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;QACvB,IAAI,CAACG,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACU,QAAQ,CAACP,KAAK;QACnC,IAAI,CAACE,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC,CAACU,QAAQ,CAACL,MAAM;MACzC,CAAC,MACI;QACD,IAAI,CAACF,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACG,KAAK;QAC1B,IAAI,CAACE,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM;MAChC;IACJ,CAAC,MACI;MACD,IAAI,CAACF,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;MACpB,IAAI,CAACK,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC;IACzB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIW,SAASA,CAACJ,WAAW,EAAE;IACnB,OAAO,IAAIT,WAAW,CAAC,IAAI,CAACK,KAAK,GAAGI,WAAW,EAAE,IAAI,CAACF,MAAM,GAAGE,WAAW,CAAC;EAC/E;EACA,CAACV,mBAAmB,IAAI;IACpB,OAAO;MACHM,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBE,MAAM,EAAE,IAAI,CAACA;IACjB,CAAC;EACL;EACAI,MAAMA,CAAA,EAAG;IACL;IACA,OAAO,IAAI,CAACZ,mBAAmB,CAAC,CAAC,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMe,IAAI,CAAC;EACPb,WAAWA,CAACc,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACAF,SAASA,CAACJ,WAAW,EAAE;IACnB,OAAO,IAAI,CAACM,IAAI,YAAYf,WAAW,GACjC,IAAI,CAACe,IAAI,GACT,IAAI,CAACA,IAAI,CAACF,SAAS,CAACJ,WAAW,CAAC;EAC1C;EACAD,UAAUA,CAACC,WAAW,EAAE;IACpB,OAAO,IAAI,CAACM,IAAI,YAAYL,YAAY,GAClC,IAAI,CAACK,IAAI,GACT,IAAI,CAACA,IAAI,CAACP,UAAU,CAACC,WAAW,CAAC;EAC3C;EACA,CAACV,mBAAmB,IAAI;IACpB,OAAO;MACH,CAAC,GAAG,IAAI,CAACgB,IAAI,CAACZ,IAAI,EAAE,GAAG;QACnBE,KAAK,EAAE,IAAI,CAACU,IAAI,CAACV,KAAK;QACtBE,MAAM,EAAE,IAAI,CAACQ,IAAI,CAACR;MACtB;IACJ,CAAC;EACL;EACAI,MAAMA,CAAA,EAAG;IACL;IACA,OAAO,IAAI,CAACZ,mBAAmB,CAAC,CAAC,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,eAAe,CAAC;EAClBf,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACjB,IAAI,CAACC,IAAI,GAAG,SAAS;IACrB,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACnB,IAAI,SAAS,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;QACtB,IAAI,CAACe,CAAC,GAAGf,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAACW,CAAC;QAC1B,IAAI,CAACC,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAACY,CAAC;MAC9B,CAAC,MACI;QACD,IAAI,CAACD,CAAC,GAAGf,IAAI,CAAC,CAAC,CAAC,CAACe,CAAC;QAClB,IAAI,CAACC,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC,CAACgB,CAAC;MACtB;IACJ,CAAC,MACI;MACD,IAAI,CAACD,CAAC,GAAGf,IAAI,CAAC,CAAC,CAAC;MAChB,IAAI,CAACgB,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC;IACpB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,UAAUA,CAACC,WAAW,EAAE;IACpB,OAAO,IAAIU,gBAAgB,CAAC,IAAI,CAACF,CAAC,GAAGR,WAAW,EAAE,IAAI,CAACS,CAAC,GAAGT,WAAW,CAAC;EAC3E;EACA,CAACV,mBAAmB,IAAI;IACpB,OAAO;MACHkB,CAAC,EAAE,IAAI,CAACA,CAAC;MACTC,CAAC,EAAE,IAAI,CAACA;IACZ,CAAC;EACL;EACAP,MAAMA,CAAA,EAAG;IACL;IACA,OAAO,IAAI,CAACZ,mBAAmB,CAAC,CAAC,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoB,gBAAgB,CAAC;EACnBlB,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACjB,IAAI,CAACC,IAAI,GAAG,UAAU;IACtB,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACnB,IAAI,UAAU,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;QACvB,IAAI,CAACe,CAAC,GAAGf,IAAI,CAAC,CAAC,CAAC,CAACU,QAAQ,CAACK,CAAC;QAC3B,IAAI,CAACC,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC,CAACU,QAAQ,CAACM,CAAC;MAC/B,CAAC,MACI;QACD,IAAI,CAACD,CAAC,GAAGf,IAAI,CAAC,CAAC,CAAC,CAACe,CAAC;QAClB,IAAI,CAACC,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC,CAACgB,CAAC;MACtB;IACJ,CAAC,MACI;MACD,IAAI,CAACD,CAAC,GAAGf,IAAI,CAAC,CAAC,CAAC;MAChB,IAAI,CAACgB,CAAC,GAAGhB,IAAI,CAAC,CAAC,CAAC;IACpB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIW,SAASA,CAACJ,WAAW,EAAE;IACnB,OAAO,IAAIO,eAAe,CAAC,IAAI,CAACC,CAAC,GAAGR,WAAW,EAAE,IAAI,CAACS,CAAC,GAAGT,WAAW,CAAC;EAC1E;EACA,CAACV,mBAAmB,IAAI;IACpB,OAAO;MACHkB,CAAC,EAAE,IAAI,CAACA,CAAC;MACTC,CAAC,EAAE,IAAI,CAACA;IACZ,CAAC;EACL;EACAP,MAAMA,CAAA,EAAG;IACL;IACA,OAAO,IAAI,CAACZ,mBAAmB,CAAC,CAAC,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqB,QAAQ,CAAC;EACXnB,WAAWA,CAACoB,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;EACAR,SAASA,CAACJ,WAAW,EAAE;IACnB,OAAO,IAAI,CAACY,QAAQ,YAAYL,eAAe,GACzC,IAAI,CAACK,QAAQ,GACb,IAAI,CAACA,QAAQ,CAACR,SAAS,CAACJ,WAAW,CAAC;EAC9C;EACAD,UAAUA,CAACC,WAAW,EAAE;IACpB,OAAO,IAAI,CAACY,QAAQ,YAAYF,gBAAgB,GAC1C,IAAI,CAACE,QAAQ,GACb,IAAI,CAACA,QAAQ,CAACb,UAAU,CAACC,WAAW,CAAC;EAC/C;EACA,CAACV,mBAAmB,IAAI;IACpB,OAAO;MACH,CAAC,GAAG,IAAI,CAACsB,QAAQ,CAAClB,IAAI,EAAE,GAAG;QACvBc,CAAC,EAAE,IAAI,CAACI,QAAQ,CAACJ,CAAC;QAClBC,CAAC,EAAE,IAAI,CAACG,QAAQ,CAACH;MACrB;IACJ,CAAC;EACL;EACAP,MAAMA,CAAA,EAAG;IACL;IACA,OAAO,IAAI,CAACZ,mBAAmB,CAAC,CAAC,CAAC;EACtC;AACJ;AAEA,SAASiB,eAAe,EAAEhB,WAAW,EAAEmB,gBAAgB,EAAET,YAAY,EAAEU,QAAQ,EAAEN,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}