{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lhaveman\\\\email-generator\\\\src\\\\components\\\\TemplateList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { core } from '@tauri-apps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateList = () => {\n  _s();\n  const [templates, setTemplates] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    core.invoke('load_templates').then(setTemplates).catch(err => {\n      console.error(err);\n      setError('Failed to load templates');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loaded Templates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: templates.map(template => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: template.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"Last Modified:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), \" \", template.last_modified, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 62\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: template.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, template.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateList, \"1PMMlRj34Aq/EVGjg+Id3L8lNMo=\");\n_c = TemplateList;\nexport default TemplateList;\nvar _c;\n$RefreshReg$(_c, \"TemplateList\");","map":{"version":3,"names":["React","useEffect","useState","core","jsxDEV","_jsxDEV","TemplateList","_s","templates","setTemplates","error","setError","invoke","then","catch","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","map","template","name","last_modified","content","_c","$RefreshReg$"],"sources":["C:/Users/lhaveman/email-generator/src/components/TemplateList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { core } from '@tauri-apps/api';\r\n\r\ntype TemplateFile = {\r\n  name: string;\r\n  content: string;\r\n  last_modified: string;\r\n};\r\n\r\nconst TemplateList: React.FC = () => {\r\n  const [templates, setTemplates] = useState<TemplateFile[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    core.invoke<TemplateFile[]>('load_templates')\r\n      .then(setTemplates)\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError('Failed to load templates');\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Loaded Templates</h2>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      <ul>\r\n        {templates.map((template) => (\r\n          <li key={template.name}>\r\n            <strong>{template.name}</strong> <br />\r\n            <em>Last Modified:</em> {template.last_modified} <br />\r\n            <pre>{template.content}</pre>\r\n            <hr />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemplateList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQvC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAiB,EAAE,CAAC;EAC9D,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACdE,IAAI,CAACS,MAAM,CAAiB,gBAAgB,CAAC,CAC1CC,IAAI,CAACJ,YAAY,CAAC,CAClBK,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACN,KAAK,CAACK,GAAG,CAAC;MAClBJ,QAAQ,CAAC,0BAA0B,CAAC;IACtC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBX,KAAK,iBAAIL,OAAA;MAAGiB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEP;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjDhB,OAAA;MAAAY,QAAA,EACGT,SAAS,CAACgB,GAAG,CAAEC,QAAQ,iBACtBpB,OAAA;QAAAY,QAAA,gBACEZ,OAAA;UAAAY,QAAA,EAASQ,QAAQ,CAACC;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,KAAC,eAAAhB,OAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACvChB,OAAA;UAAAY,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,KAAC,EAACI,QAAQ,CAACE,aAAa,EAAC,GAAC,eAAAtB,OAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACvDhB,OAAA;UAAAY,QAAA,EAAMQ,QAAQ,CAACG;QAAO;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7BhB,OAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA,GAJCI,QAAQ,CAACC,IAAI;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKlB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACd,EAAA,CA7BID,YAAsB;AAAAuB,EAAA,GAAtBvB,YAAsB;AA+B5B,eAAeA,YAAY;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}